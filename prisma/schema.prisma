generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id         String   @id
  email      String   @unique
  name       String?
  phone      String?
  role       UserRole @default(CUSTOMER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  orders     Order[]

  @@map("profiles")
}

model Product {
  id          String      @id @default(uuid())
  squareId    String      @unique
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  categoryId  String
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  variants    Variant[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Variant {
  id              String      @id @default(uuid())
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id            String        @id @default(uuid())
  squareOrderId String?       @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  userId        String?
  customerName  String
  email         String
  phone         String
  pickupTime    DateTime
  notes         String?
  cancelReason  String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  profile       Profile?      @relation(fields: [userId], references: [id])
  items         OrderItem[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id        String   @id @default(uuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String
  variantId String?
  orderId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
}

model BusinessHours {
  id        String   @id @default(uuid())
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreSettings {
  id                  String   @id @default(uuid())
  name                String   @default("Destino SF")
  address             String?
  city                String?
  state               String?
  zipCode             String?
  phone               String?
  email               String?
  taxRate             Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours     Int      @default(2)
  minOrderAmount      Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance    Int      @default(7)
  isStoreOpen         Boolean  @default(true)
  temporaryClosureMsg String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("store_settings")
}

model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id             String       @id @default(uuid())
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                       String                     @id @db.Uuid
  email                    String                     @unique
  name                     String?
  phone                    String?
  role                     UserRole                   @default(CUSTOMER)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  cateringOrders           CateringOrder[]
  customerEmailPreferences CustomerEmailPreferences[]
  emailAlerts              EmailAlert[]
  orders                   Order[]
  userSyncLogs             UserSyncLog[]
  archivedOrders           Order[]                    @relation("ArchivedOrders")
  archivedCateringOrders   CateringOrder[]            @relation("ArchivedCateringOrders")

  @@map("profiles")
}

model Product {
  id             String          @id @default(uuid()) @db.Uuid
  squareId       String          @unique
  name           String
  description    String?
  price          Decimal         @db.Decimal(10, 2)
  images         String[]
  categoryId     String          @db.Uuid
  featured       Boolean         @default(false)
  active         Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  slug           String?         @unique
  ordinal        BigInt?
  inventory      Int?            @default(0)
  syncSource     String?         @default("SQUARE") @db.VarChar(50)
  lastSyncAt     DateTime?
  syncLocked     Boolean         @default(false)
  orderItems     OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  spotlightPicks SpotlightPick[]
  variants       Variant[]

  @@index([categoryId])
  @@index([ordinal])
  @@index([syncSource])
  @@map("products")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  order       Int       @default(0)
  active      Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  squareId    String?   @unique
  products    Product[]

  @@map("categories")
}

model Variant {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String      @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("variants")
}

model Order {
  id                        String        @id @default(uuid()) @db.Uuid
  squareOrderId             String?       @unique
  status                    OrderStatus   @default(PENDING)
  total                     Decimal       @db.Decimal(10, 2)
  userId                    String?       @db.Uuid
  customerName              String
  email                     String
  phone                     String
  fulfillmentType           String?       @map("fulfillment_type")
  notes                     String?
  pickupTime                DateTime?     @map("pickup_time")
  deliveryDate              String?       @map("delivery_date")
  deliveryTime              String?       @map("delivery_time")
  shippingMethodName        String?       @map("shipping_method_name")
  shippingCarrier           String?       @map("shipping_carrier")
  shippingServiceLevelToken String?       @map("shipping_service_level_token")
  shippingCostCents         Int?          @map("shipping_cost_cents")
  shippingRateId            String?       @map("shipping_rate_id")
  trackingNumber            String?
  cancelReason              String?
  paymentStatus             PaymentStatus @default(PENDING)
  rawData                   Json?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  taxAmount                 Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  isCateringOrder           Boolean       @default(false)
  paymentMethod             PaymentMethod @default(SQUARE)
  lastRetryAt               DateTime?     @map("last_retry_at")
  paymentUrl                String?       @map("payment_url")
  paymentUrlExpiresAt       DateTime?     @map("payment_url_expires_at")
  retryCount                Int           @default(0) @map("retry_count")
  // Archive fields
  isArchived                Boolean       @default(false) @map("is_archived")
  archivedAt                DateTime?     @map("archived_at")
  archivedBy                String?       @db.Uuid @map("archived_by")
  archiveReason             String?       @map("archive_reason")
  archivedByUser            Profile?      @relation("ArchivedOrders", fields: [archivedBy], references: [id])
  emailAlerts               EmailAlert[]
  items                     OrderItem[]
  profile                   Profile?      @relation(fields: [userId], references: [id])
  payments                  Payment[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([isCateringOrder])
  @@index([isArchived])
  @@map("orders")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  squarePaymentId String        @unique
  orderId         String        @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  rawData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId])
  @@index([status])
  @@map("payments")
}

model Refund {
  id             String   @id @default(uuid()) @db.Uuid
  squareRefundId String   @unique
  paymentId      String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  reason         String?
  status         String
  rawData        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payment        Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@map("refunds")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  orderId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
  @@map("order_items")
}

model BusinessHours {
  id        String   @id @default(uuid()) @db.Uuid
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("business_hours")
}

model StoreSettings {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String   @default("Destino SF")
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  phone                 String?
  email                 String?
  taxRate               Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours       Int      @default(2)
  minOrderAmount        Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance      Int      @default(7)
  isStoreOpen           Boolean  @default(true)
  temporaryClosureMsg   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cateringMinimumAmount Decimal  @default(0) @db.Decimal(10, 2)

  @@map("store_settings")
}

model CateringDeliveryZone {
  id                    String   @id @default(uuid()) @db.Uuid
  zone                  String   @unique
  name                  String
  description           String?
  minimumAmount         Decimal  @db.Decimal(10, 2)
  deliveryFee           Decimal  @db.Decimal(10, 2)
  estimatedDeliveryTime String?
  postalCodes           String[]
  cities                String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  displayOrder          Int      @default(0)
  active                Boolean  @default(true)

  @@index([zone])
  @@index([active])
  @@map("catering_delivery_zones")
}

model SpotlightPick {
  id        String   @id @default(uuid()) @db.Uuid
  position  Int      @unique
  productId String   @map("product_id") @db.Uuid
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([position])
  @@index([isActive])
  @@index([productId])
  @@map("spotlight_picks")
}

model Subscriber {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscribers")
}

model PromoCode {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("promo_codes")
}

model ShippingConfiguration {
  id                          String   @id @default(uuid()) @db.Uuid
  productName                 String   @unique
  baseWeightLb                Decimal  @db.Decimal(10, 2)
  weightPerUnitLb             Decimal  @db.Decimal(10, 2)
  isActive                    Boolean  @default(true)
  applicableForNationwideOnly Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@index([productName])
  @@index([isActive])
  @@map("shipping_configurations")
}

model CateringPackage {
  id             String                @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  minPeople      Int
  pricePerPerson Decimal               @db.Decimal(10, 2)
  type           CateringPackageType
  imageUrl       String?
  isActive       Boolean               @default(true)
  featuredOrder  Int?
  dietaryOptions String[]
  squareCategory String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  orderItems     CateringOrderItem[]
  items          CateringPackageItem[]
  ratings        CateringRating[]

  @@map("catering_packages")
}

model CateringItem {
  id              String                 @id @default(uuid()) @db.Uuid
  name            String
  description     String?
  price           Decimal                @db.Decimal(10, 2)
  category        CateringItemCategory
  isVegetarian    Boolean                @default(false)
  isVegan         Boolean                @default(false)
  isGlutenFree    Boolean                @default(false)
  servingSize     String?
  imageUrl        String?
  isActive        Boolean                @default(true)
  squareCategory  String?
  squareProductId String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  overrides       CateringItemOverrides?
  orderItems      CateringOrderItem[]
  packageItems    CateringPackageItem[]

  @@map("catering_items")
}

model CateringPackageItem {
  id           String          @id @default(uuid()) @db.Uuid
  packageId    String          @db.Uuid
  itemId       String          @db.Uuid
  quantity     Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  cateringItem CateringItem    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  package      CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, itemId])
  @@index([packageId])
  @@index([itemId])
  @@map("catering_package_items")
}

model CateringRating {
  id           String          @id @default(uuid()) @db.Uuid
  packageId    String          @db.Uuid
  rating       Int             @db.SmallInt
  review       String?
  reviewerName String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  package      CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@map("catering_ratings")
}

model CateringOrder {
  id                String              @id @default(uuid()) @db.Uuid
  customerId        String?             @db.Uuid
  email             String
  name              String
  phone             String
  eventDate         DateTime
  numberOfPeople    Int
  totalAmount       Decimal             @db.Decimal(10, 2)
  status            CateringStatus      @default(PENDING)
  notes             String?
  specialRequests   String?
  deliveryZone      String?
  deliveryAddress   String?
  deliveryFee       Decimal?            @db.Decimal(10, 2)
  paymentMethod     PaymentMethod       @default(SQUARE)
  paymentStatus     PaymentStatus       @default(PENDING)
  squareOrderId     String?             @unique
  squareCheckoutUrl String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  // Archive fields
  isArchived        Boolean             @default(false) @map("is_archived")
  archivedAt        DateTime?           @map("archived_at")
  archivedBy        String?             @db.Uuid @map("archived_by")
  archiveReason     String?             @map("archive_reason")
  archivedByUser    Profile?            @relation("ArchivedCateringOrders", fields: [archivedBy], references: [id])
  items             CateringOrderItem[]
  customer          Profile?            @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([eventDate])
  @@index([createdAt])
  @@index([isArchived])
  @@map("catering_orders")
}

model CateringOrderItem {
  id           String           @id @default(uuid()) @db.Uuid
  orderId      String           @db.Uuid
  itemType     String
  itemId       String?          @db.Uuid
  packageId    String?          @db.Uuid
  name         String
  quantity     Int
  pricePerUnit Decimal          @db.Decimal(10, 2)
  totalPrice   Decimal          @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  item         CateringItem?    @relation(fields: [itemId], references: [id])
  order        CateringOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package      CateringPackage? @relation(fields: [packageId], references: [id])

  @@index([orderId])
  @@index([itemId])
  @@index([packageId])
  @@map("catering_order_items")
}

model CateringItemOverrides {
  id                  String       @id @default(uuid()) @db.Uuid
  itemId              String       @unique @db.Uuid
  localDescription    String?
  localImageUrl       String?
  localIsVegetarian   Boolean?
  localIsVegan        Boolean?
  localIsGlutenFree   Boolean?
  localServingSize    String?
  localDietaryOptions String[]
  overrideDescription Boolean      @default(false)
  overrideImage       Boolean      @default(false)
  overrideDietary     Boolean      @default(false)
  overrideServingSize Boolean      @default(false)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  item                CateringItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@map("catering_item_overrides")
}

model EmailAlert {
  id             String        @id @default(uuid()) @db.Uuid
  type           AlertType
  priority       AlertPriority @default(MEDIUM)
  status         AlertStatus   @default(PENDING)
  recipientEmail String
  subject        String
  sentAt         DateTime?
  failedAt       DateTime?
  retryCount     Int           @default(0)
  metadata       Json?
  relatedOrderId String?       @db.Uuid
  relatedUserId  String?       @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  relatedOrder   Order?        @relation(fields: [relatedOrderId], references: [id])
  relatedUser    Profile?      @relation(fields: [relatedUserId], references: [id])

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([relatedOrderId])
  @@map("email_alerts")
}

model CustomerEmailPreferences {
  email            String
  orderUpdates     EmailFrequency @default(IMMEDIATE) @map("order_updates")
  marketingEmails  EmailFrequency @default(WEEKLY_DIGEST) @map("marketing_emails")
  feedbackRequests EmailFrequency @default(IMMEDIATE) @map("feedback_requests")
  timezone         String         @default("America/Los_Angeles")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  id               String         @id @default(uuid()) @db.Uuid
  userId           String?        @map("user_id") @db.Uuid
  user             Profile?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
  @@map("customer_email_preferences")
}

model ContactSubmission {
  name       String
  email      String
  subject    String?
  message    String
  type       String   @default("general")
  status     String   @default("new")
  assignedTo String?  @map("assigned_to")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  id         String   @id @default(uuid()) @db.Uuid

  @@index([email])
  @@index([status])
  @@index([type])
  @@map("contact_submissions")
}

model BusinessMetric {
  date      DateTime @db.Date
  metric    String
  value     Decimal  @db.Decimal(10, 2)
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")
  id        String   @id @default(uuid()) @db.Uuid

  @@unique([date, metric])
  @@index([date])
  @@index([metric])
  @@map("business_metrics")
}

model UserSyncLog {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  syncId      String     @unique
  status      SyncStatus @default(PENDING)
  startedBy   String
  startTime   DateTime   @default(now())
  endTime     DateTime?
  progress    Int        @default(0)
  message     String?
  currentStep String?
  results     Json?
  errors      Json?
  options     Json?
  user        Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startTime])
  @@map("user_sync_logs")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  FULFILLMENT_UPDATED
  SHIPPING
  DELIVERED
  PAYMENT_FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

enum PaymentMethod {
  SQUARE
  CASH
  VENMO
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CateringStatus {
  PENDING
  CONFIRMED
  PREPARING
  COMPLETED
  CANCELLED
}

enum CateringPackageType {
  INDIVIDUAL
  FAMILY_STYLE
  BUFFET
  BOXED_LUNCH
}

enum CateringItemCategory {
  STARTER
  ENTREE
  SIDE
  SALAD
  DESSERT
  BEVERAGE
}

enum EmailFrequency {
  IMMEDIATE
  DAILY_DIGEST
  WEEKLY_DIGEST
  DISABLED
}

enum AlertType {
  NEW_ORDER
  ORDER_STATUS_CHANGE
  PAYMENT_FAILED
  SYSTEM_ERROR
  LOW_INVENTORY
  DAILY_SUMMARY
  CUSTOMER_ORDER_CONFIRMATION
  CUSTOMER_ORDER_STATUS
  CUSTOMER_PICKUP_READY
  CUSTOMER_DELIVERY_UPDATE
  CUSTOMER_SHIPPING_UPDATE
  CUSTOMER_ORDER_COMPLETE
  CUSTOMER_FEEDBACK_REQUEST
  CONTACT_FORM_RECEIVED
  CATERING_INQUIRY_RECEIVED
  INVENTORY_LOW_STOCK
  SALES_TREND_ALERT
  REVENUE_MILESTONE
  ORDER_VOLUME_ALERT
  PAYMENT_GATEWAY_ALERT
  WEBSITE_PERFORMANCE_ALERT
}

model SyncHistory {
  id              String    @id @default(uuid()) @db.Uuid
  syncType        String    @db.VarChar(50)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  productsSynced  Int       @default(0)
  productsSkipped Int       @default(0)
  errors          Json      @default("[]")
  metadata        Json      @default("{}")
  createdBy       String?   @db.VarChar(255)
  createdAt       DateTime  @default(now())

  @@index([completedAt(sort: Desc)])
  @@index([syncType])
  @@map("sync_history")
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  PENDING
  SENT
  FAILED
  RETRYING
}

enum SyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

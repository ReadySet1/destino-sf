generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id             String          @id @db.Uuid
  email          String          @unique
  name           String?
  phone          String?
  role           UserRole        @default(CUSTOMER)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  cateringOrders CateringOrder[]
  orders         Order[]
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  squareId    String      @unique
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  categoryId  String      @db.Uuid
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  slug        String?     @unique
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  variants    Variant[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  squareId    String?   @unique
  products    Product[]
}

model Variant {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String      @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id                        String        @id @default(uuid()) @db.Uuid
  squareOrderId             String?       @unique
  status                    OrderStatus   @default(PENDING)
  total                     Decimal       @db.Decimal(10, 2)
  userId                    String?       @db.Uuid
  customerName              String
  email                     String
  phone                     String
  fulfillmentType           String?       @map("fulfillment_type")
  notes                     String?
  pickupTime                DateTime?     @map("pickup_time")
  deliveryDate              String?       @map("delivery_date")
  deliveryTime              String?       @map("delivery_time")
  shippingMethodName        String?       @map("shipping_method_name")
  shippingCarrier           String?       @map("shipping_carrier")
  shippingServiceLevelToken String?       @map("shipping_service_level_token")
  shippingCostCents         Int?          @map("shipping_cost_cents")
  shippingRateId            String?       @map("shipping_rate_id")
  trackingNumber            String?
  cancelReason              String?
  paymentStatus             PaymentStatus @default(PENDING)
  rawData                   Json?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  taxAmount                 Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  isCateringOrder           Boolean       @default(false)
  paymentMethod             PaymentMethod @default(SQUARE)
  items                     OrderItem[]
  payments                  Payment[]
  profile                   Profile?      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([isCateringOrder])
  @@map("orders")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  squarePaymentId String        @unique
  orderId         String        @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  rawData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId])
  @@index([status])
}

model Refund {
  id             String   @id @default(uuid()) @db.Uuid
  squareRefundId String   @unique
  paymentId      String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  reason         String?
  status         String
  rawData        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payment        Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  orderId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
}

model BusinessHours {
  id        String   @id @default(uuid()) @db.Uuid
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreSettings {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String   @default("Destino SF")
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  phone                 String?
  email                 String?
  taxRate               Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours       Int      @default(2)
  minOrderAmount        Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance      Int      @default(7)
  isStoreOpen           Boolean  @default(true)
  temporaryClosureMsg   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cateringMinimumAmount Decimal  @default(0) @db.Decimal(10, 2)
}

model ShippingConfiguration {
  id                String   @id @default(uuid()) @db.Uuid
  productName       String   @unique // e.g., "alfajores", "empanadas"
  baseWeightLb      Decimal  @db.Decimal(10, 4) // Base weight for 1 unit in pounds
  weightPerUnitLb   Decimal  @db.Decimal(10, 4) // Additional weight per extra unit
  isActive          Boolean  @default(true)
  applicableForNationwideOnly Boolean @default(true) // Only apply for nationwide shipping
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([productName])
  @@index([isActive])
}

model Subscriber {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model CateringPackage {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  minPeople      Int                   @default(2)
  pricePerPerson Decimal               @db.Decimal(10, 2)
  type           CateringPackageType
  imageUrl       String?
  isActive       Boolean               @default(true)
  featuredOrder  Int?                  @default(0)
  dietaryOptions String[]              @default([])
  squareCategory String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @default(now()) @updatedAt
  items          CateringPackageItem[]
  ratings        CateringRating[]
}

model CateringItem {
  id              String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  description     String?
  price           Decimal                 @db.Decimal(10, 2)
  category        CateringItemCategory
  isVegetarian    Boolean                 @default(false)
  isVegan         Boolean                 @default(false)
  isGlutenFree    Boolean                 @default(false)
  servingSize     String?
  imageUrl        String?
  isActive        Boolean                 @default(true)
  squareCategory  String?
  squareProductId String?
  // Square sync metadata
  squareImageUrl  String?                 // Original Square image URL
  lastSyncedAt    DateTime?               // Last time synced from Square
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  packageItems    CateringPackageItem[]
  overrides       CateringItemOverrides?  // Local overrides for Square items
}

model CateringItemOverrides {
  id                   String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  itemId               String      @unique @db.Uuid
  // Override fields
  localDescription     String?
  localImageUrl        String?     // Supabase-stored image URL
  localIsVegetarian    Boolean?
  localIsVegan         Boolean?
  localIsGlutenFree    Boolean?
  localServingSize     String?
  localDietaryOptions  String[]    @default([])
  // Control flags - what gets overridden
  overrideDescription  Boolean     @default(false)
  overrideImage        Boolean     @default(false)
  overrideDietary      Boolean     @default(false)
  overrideServingSize  Boolean     @default(false)
  // Meta
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @default(now()) @updatedAt
  
  // Relations
  cateringItem         CateringItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@index([itemId], map: "idx_catering_item_overrides_item_id")
}

model CateringPackageItem {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packageId       String          @db.Uuid
  itemId          String          @db.Uuid
  quantity        Int             @default(1)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  cateringItem    CateringItem    @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_item")
  cateringPackage CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_package")

  @@index([itemId], map: "idx_catering_package_item_item_id")
  @@index([packageId], map: "idx_catering_package_item_package_id")
}

model CateringRating {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  packageId       String          @db.Uuid
  rating          Int             @db.SmallInt
  review          String?
  reviewerName    String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  cateringPackage CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rating_package")

  @@index([packageId], map: "idx_catering_rating_package_id")
}

model CateringOrder {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId        String?             @db.Uuid
  email             String
  name              String
  phone             String
  eventDate         DateTime
  numberOfPeople    Int
  totalAmount       Decimal             @db.Decimal(10, 2)
  status            CateringStatus      @default(PENDING)
  paymentStatus     PaymentStatus       @default(PENDING)
  paymentMethod     PaymentMethod?
  squareOrderId     String?             @unique
  squarePaymentId   String?             @unique
  squareCheckoutUrl String?
  notes             String?
  specialRequests   String?
  deliveryZone      String?
  deliveryAddress   String?
  deliveryFee       Decimal?            @db.Decimal(10, 2)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now()) @updatedAt
  profile           Profile?            @relation(fields: [customerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_customer")
  items             CateringOrderItem[]

  @@index([customerId], map: "idx_catering_order_customer_id")
  @@index([squareOrderId], map: "idx_catering_order_square_order_id")
}

model CateringOrderItem {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId      String        @db.Uuid
  itemType     String
  itemId       String        @db.Uuid
  name         String
  quantity     Int
  pricePerUnit Decimal       @db.Decimal(10, 2)
  totalPrice   Decimal       @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
  order        CateringOrder @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_order")

  @@index([orderId], map: "idx_catering_order_item_order_id")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  FULFILLMENT_UPDATED
  SHIPPING
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

enum PaymentMethod {
  SQUARE
  CASH
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CateringPackageType {
  INDIVIDUAL
  BUFFET
  FAMILY_STYLE
  BOXED_LUNCH
}

enum CateringItemCategory {
  STARTER
  ENTREE
  SIDE
  SALAD
  DESSERT
  BEVERAGE
  PROTEIN
  ADD_ON
}

enum CateringStatus {
  PENDING
  CONFIRMED
  PREPARING
  COMPLETED
  CANCELLED
}

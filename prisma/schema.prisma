generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                       String                     @id @db.Uuid
  email                    String                     @unique
  name                     String?
  phone                    String?
  role                     UserRole                   @default(CUSTOMER)
  created_at               DateTime                   @default(now())
  updated_at               DateTime                   @updatedAt
  archivedCateringOrders   CateringOrder[]            @relation("ArchivedCateringOrders")
  cateringOrders           CateringOrder[]
  customerEmailPreferences CustomerEmailPreferences[]
  emailAlerts              EmailAlert[]
  archivedOrders           Order[]                    @relation("ArchivedOrders")
  orders                   Order[]
  userSyncLogs             UserSyncLog[]

  @@map("profiles")
}

model Product {
  id                 String          @id @default(uuid()) @db.Uuid
  squareId           String          @unique
  name               String
  description        String?
  price              Decimal         @db.Decimal(10, 2)
  images             String[]
  categoryId         String          @db.Uuid
  featured           Boolean         @default(false)
  active             Boolean         @default(true)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  slug               String?         @unique
  ordinal            BigInt?
  inventory          Int?            @default(0)
  lastSyncAt         DateTime?
  syncLocked         Boolean         @default(false)
  syncSource         String?         @default("SQUARE") @db.VarChar(50)
  squareVersion      BigInt?         @map("square_version")
  squareUpdatedAt    DateTime?       @map("square_updated_at")
  syncStatus         String?         @default("SYNCED") @map("sync_status") @db.VarChar(20)
  calories           Int?
  dietaryPreferences String[]        @map("dietary_preferences")
  ingredients        String?
  allergens          String[]
  nutritionFacts     Json?           @map("nutrition_facts")
  orderItems         OrderItem[]
  category           Category        @relation(fields: [categoryId], references: [id])
  spotlightPicks     SpotlightPick[]
  variants           Variant[]

  @@index([categoryId])
  @@index([ordinal])
  @@index([syncSource])
  @@index([syncStatus])
  @@index([active])
  @@index([createdAt])
  @@index([squareId, active])
  @@index([squareId, syncStatus])
  @@index([allergens], map: "idx_products_allergens", type: Gin)
  @@index([calories], map: "idx_products_calories")
  @@index([dietaryPreferences], map: "idx_products_dietary_preferences", type: Gin)
  @@index([nutritionFacts], map: "idx_products_nutrition_facts", type: Gin)
  @@map("products")
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  order       Int       @default(0)
  active      Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  squareId    String?   @unique
  products    Product[]

  @@map("categories")
}

model Variant {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String      @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("variants")
}

model Order {
  id                        String        @id @default(uuid()) @db.Uuid
  squareOrderId             String?       @unique
  status                    OrderStatus   @default(PENDING)
  total                     Decimal       @db.Decimal(10, 2)
  userId                    String?       @db.Uuid
  customerName              String
  email                     String
  phone                     String
  fulfillmentType           String?       @map("fulfillment_type")
  notes                     String?
  pickupTime                DateTime?     @map("pickup_time")
  deliveryDate              String?       @map("delivery_date")
  deliveryTime              String?       @map("delivery_time")
  shippingMethodName        String?       @map("shipping_method_name")
  shippingCarrier           String?       @map("shipping_carrier")
  shippingServiceLevelToken String?       @map("shipping_service_level_token")
  shippingCostCents         Int?          @map("shipping_cost_cents")
  shippingRateId            String?       @map("shipping_rate_id")
  trackingNumber            String?
  cancelReason              String?
  paymentStatus             PaymentStatus @default(PENDING)
  rawData                   Json?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  taxAmount                 Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  isCateringOrder           Boolean       @default(false)
  paymentMethod             PaymentMethod @default(SQUARE)
  archiveReason             String?       @map("archive_reason")
  archivedAt                DateTime?     @map("archived_at")
  archivedBy                String?       @map("archived_by") @db.Uuid
  isArchived                Boolean       @default(false) @map("is_archived")
  lastRetryAt               DateTime?     @map("last_retry_at")
  paymentUrl                String?       @map("payment_url")
  paymentUrlExpiresAt       DateTime?     @map("payment_url_expires_at")
  retryCount                Int           @default(0) @map("retry_count")
  labelUrl                  String?       @map("label_url")
  labelCreatedAt            DateTime?     @map("label_created_at")
  emailAlerts               EmailAlert[]
  items                     OrderItem[]
  archivedByUser            Profile?      @relation("ArchivedOrders", fields: [archivedBy], references: [id])
  profile                   Profile?      @relation(fields: [userId], references: [id])
  payments                  Payment[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([isCateringOrder])
  @@index([isArchived])
  @@map("orders")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  squarePaymentId String        @unique
  orderId         String        @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  rawData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId])
  @@index([status])
  @@map("payments")
}

model Refund {
  id             String   @id @default(uuid()) @db.Uuid
  squareRefundId String   @unique
  paymentId      String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  reason         String?
  status         String
  rawData        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payment        Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@map("refunds")
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  orderId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
  @@map("order_items")
}

model BusinessHours {
  id        String   @id @default(uuid()) @db.Uuid
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("business_hours")
}

model StoreSettings {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String   @default("Destino SF")
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  phone                 String?
  email                 String?
  taxRate               Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours       Int      @default(2)
  minOrderAmount        Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance      Int      @default(7)
  isStoreOpen           Boolean  @default(true)
  temporaryClosureMsg   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cateringMinimumAmount Decimal  @default(0) @db.Decimal(10, 2)

  @@map("store_settings")
}

model CateringDeliveryZone {
  id                    String   @id @default(uuid()) @db.Uuid
  zone                  String   @unique
  name                  String
  description           String?
  minimumAmount         Decimal  @db.Decimal(10, 2)
  deliveryFee           Decimal  @db.Decimal(10, 2)
  estimatedDeliveryTime String?
  postalCodes           String[]
  cities                String[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  displayOrder          Int      @default(0)
  active                Boolean  @default(true)

  @@index([zone])
  @@index([active])
  @@map("catering_delivery_zones")
}

model SpotlightPick {
  id        String   @id @default(uuid()) @db.Uuid
  position  Int      @unique
  productId String   @map("product_id") @db.Uuid
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([position])
  @@index([isActive])
  @@index([productId])
  @@map("spotlight_picks")
}

model Subscriber {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscribers")
}

model PromoCode {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("promo_codes")
}

model ShippingConfiguration {
  id                          String   @id @default(uuid()) @db.Uuid
  productName                 String   @unique
  baseWeightLb                Decimal  @db.Decimal(10, 2)
  weightPerUnitLb             Decimal  @db.Decimal(10, 2)
  isActive                    Boolean  @default(true)
  applicableForNationwideOnly Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@index([productName])
  @@index([isActive])
  @@map("shipping_configurations")
}

model CateringPackage {
  id             String                @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  minPeople      Int
  pricePerPerson Decimal               @db.Decimal(10, 2)
  type           CateringPackageType
  imageUrl       String?
  isActive       Boolean               @default(true)
  featuredOrder  Int?
  dietaryOptions String[]
  squareCategory String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  orderItems     CateringOrderItem[]
  items          CateringPackageItem[]
  ratings        CateringRating[]

  @@map("catering_packages")
}

model CateringPackageItem {
  id        String          @id @default(uuid()) @db.Uuid
  packageId String          @db.Uuid
  itemName  String
  quantity  Int
  createdAt DateTime        @default(now()) @db.Timestamp(6)
  updatedAt DateTime        @updatedAt @db.Timestamp(6)
  package   CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, itemName], map: "catering_package_items_package_item_unique")
  @@index([packageId])
  @@map("catering_package_items")
}

model CateringRating {
  id           String          @id @default(uuid()) @db.Uuid
  packageId    String          @db.Uuid
  rating       Int             @db.SmallInt
  review       String?
  reviewerName String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  package      CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@index([packageId])
  @@map("catering_ratings")
}

model CateringOrder {
  id                  String              @id @default(uuid()) @db.Uuid
  customerId          String?             @db.Uuid
  email               String
  name                String
  phone               String
  eventDate           DateTime
  numberOfPeople      Int
  totalAmount         Decimal             @db.Decimal(10, 2)
  status              CateringStatus      @default(PENDING)
  notes               String?
  specialRequests     String?
  deliveryZone        String?
  deliveryAddress     String?
  deliveryAddressJson Json?               @map("delivery_address_json")
  deliveryFee         Decimal?            @db.Decimal(10, 2)
  paymentMethod       PaymentMethod       @default(SQUARE)
  paymentStatus       PaymentStatus       @default(PENDING)
  squareOrderId       String?             @unique
  squareCheckoutUrl   String?
  squareCheckoutId    String?             @map("square_checkout_id")
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  archiveReason       String?             @map("archive_reason")
  archivedAt          DateTime?           @map("archived_at")
  archivedBy          String?             @map("archived_by") @db.Uuid
  isArchived          Boolean             @default(false) @map("is_archived")
  items               CateringOrderItem[]
  archivedByUser      Profile?            @relation("ArchivedCateringOrders", fields: [archivedBy], references: [id])
  customer            Profile?            @relation(fields: [customerId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([eventDate])
  @@index([createdAt])
  @@index([isArchived])
  @@map("catering_orders")
}

model CateringOrderItem {
  id           String           @id @default(uuid()) @db.Uuid
  orderId      String           @db.Uuid
  packageId    String?          @db.Uuid
  itemType     String
  itemName     String
  quantity     Int
  pricePerUnit Decimal          @db.Decimal(10, 2)
  totalPrice   Decimal          @db.Decimal(10, 2)
  notes        String?
  createdAt    DateTime         @default(now()) @db.Timestamp(6)
  updatedAt    DateTime         @updatedAt @db.Timestamp(6)
  order        CateringOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  package      CateringPackage? @relation(fields: [packageId], references: [id])

  @@index([orderId])
  @@index([packageId])
  @@map("catering_order_items")
}

model CateringItemMapping {
  id              String   @id @default(uuid()) @db.Uuid
  squareName      String   @map("square_name") @db.VarChar(255)
  pdfName         String   @map("pdf_name") @db.VarChar(255)
  confidenceScore Decimal? @map("confidence_score") @db.Decimal(3, 2)
  isVerified      Boolean  @default(false) @map("is_verified")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([squareName, pdfName], name: "unique_square_pdf_mapping")
  @@index([squareName], map: "idx_catering_mappings_square")
  @@index([pdfName], map: "idx_catering_mappings_pdf")
  @@map("catering_item_mappings")
}

model BoxedLunchTier {
  id            String   @id @default(uuid()) @db.Uuid
  tierNumber    Int      @unique @map("tier_number")
  name          String   @db.VarChar(100)
  priceCents    Int      @map("price_cents")
  proteinAmount String?  @map("protein_amount") @db.VarChar(50)
  sides         Json     @default("[]")
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([tierNumber])
  @@index([active])
  @@map("boxed_lunch_tiers")
}

model EmailAlert {
  id             String        @id @default(uuid()) @db.Uuid
  type           AlertType
  priority       AlertPriority @default(MEDIUM)
  status         AlertStatus   @default(PENDING)
  recipientEmail String
  subject        String
  sentAt         DateTime?
  failedAt       DateTime?
  retryCount     Int           @default(0)
  metadata       Json?
  relatedOrderId String?       @db.Uuid
  relatedUserId  String?       @db.Uuid
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  relatedOrder   Order?        @relation(fields: [relatedOrderId], references: [id])
  relatedUser    Profile?      @relation(fields: [relatedUserId], references: [id])

  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([relatedOrderId])
  @@map("email_alerts")
}

model CustomerEmailPreferences {
  id               String         @id @default(uuid()) @db.Uuid
  userId           String?        @map("user_id") @db.Uuid
  email            String
  orderUpdates     EmailFrequency @default(IMMEDIATE) @map("order_updates")
  marketingEmails  EmailFrequency @default(WEEKLY_DIGEST) @map("marketing_emails")
  feedbackRequests EmailFrequency @default(IMMEDIATE) @map("feedback_requests")
  timezone         String         @default("America/Los_Angeles")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  user             Profile?       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([userId])
  @@map("customer_email_preferences")
}

model ContactSubmission {
  id         String   @id @default(uuid()) @db.Uuid
  name       String
  email      String
  subject    String?
  message    String
  type       String   @default("general")
  status     String   @default("new")
  assignedTo String?  @map("assigned_to")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([status])
  @@index([type])
  @@map("contact_submissions")
}

model BusinessMetric {
  id        String   @id @default(uuid()) @db.Uuid
  date      DateTime @db.Date
  metric    String
  value     Decimal  @db.Decimal(10, 2)
  metadata  Json?
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([date, metric])
  @@index([date])
  @@index([metric])
  @@map("business_metrics")
}

model UserSyncLog {
  id          String     @id @default(uuid()) @db.Uuid
  userId      String     @db.Uuid
  syncId      String     @unique
  status      SyncStatus @default(PENDING)
  startedBy   String
  startTime   DateTime   @default(now())
  endTime     DateTime?
  progress    Int        @default(0)
  message     String?
  currentStep String?
  results     Json?
  errors      Json?
  options     Json?
  user        Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([startTime])
  @@map("user_sync_logs")
}

model SyncHistory {
  id              String    @id @default(uuid()) @db.Uuid
  syncType        String    @db.VarChar(50)
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  productsSynced  Int       @default(0)
  productsSkipped Int       @default(0)
  errors          Json      @default("[]")
  metadata        Json      @default("{}")
  createdBy       String?   @db.VarChar(255)
  createdAt       DateTime  @default(now())

  @@index([completedAt(sort: Desc)])
  @@index([syncType])
  @@map("sync_history")
}

model SyncLog {
  id           String    @id @default(uuid()) @db.Uuid
  syncType     String    @map("sync_type") @db.VarChar(50)
  status       String    @db.VarChar(20)
  itemsSynced  Int       @default(0) @map("items_synced")
  itemsCreated Int       @default(0) @map("items_created")
  itemsUpdated Int       @default(0) @map("items_updated")
  itemsDeleted Int       @default(0) @map("items_deleted")
  itemsSkipped Int       @default(0) @map("items_skipped")
  errors       Json?
  warnings     Json?
  metadata     Json?
  startedAt    DateTime  @default(now()) @map("started_at")
  completedAt  DateTime? @map("completed_at")
  createdBy    String?   @map("created_by") @db.Uuid

  @@index([status])
  @@index([startedAt])
  @@index([syncType])
  @@map("sync_logs")
}

model protected_products {
  id           Int       @id @default(autoincrement())
  square_id    String    @unique
  product_name String?
  reason       String?   @default("Core empanadas/sauces - should always be active")
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_sync_queue {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  email        String?
  action       String
  processed    Boolean?  @default(false)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  processed_at DateTime? @db.Timestamp(6)

  @@index([processed], map: "idx_user_sync_queue_processed")
  @@index([user_id], map: "idx_user_sync_queue_user_id")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  FULFILLMENT_UPDATED
  SHIPPING
  DELIVERED
  PAYMENT_FAILED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

enum PaymentMethod {
  SQUARE
  CASH
  VENMO
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum CateringStatus {
  PENDING
  CONFIRMED
  PREPARING
  COMPLETED
  CANCELLED
}

enum CateringPackageType {
  INDIVIDUAL
  FAMILY_STYLE
  BUFFET
  BOXED_LUNCH
}

enum EmailFrequency {
  IMMEDIATE
  DAILY_DIGEST
  WEEKLY_DIGEST
  DISABLED
}

enum AlertType {
  NEW_ORDER
  ORDER_STATUS_CHANGE
  PAYMENT_FAILED
  SYSTEM_ERROR
  LOW_INVENTORY
  DAILY_SUMMARY
  CUSTOMER_ORDER_CONFIRMATION
  CUSTOMER_ORDER_STATUS
  CUSTOMER_PICKUP_READY
  CUSTOMER_DELIVERY_UPDATE
  CUSTOMER_SHIPPING_UPDATE
  CUSTOMER_ORDER_COMPLETE
  CUSTOMER_FEEDBACK_REQUEST
  CONTACT_FORM_RECEIVED
  CATERING_INQUIRY_RECEIVED
  INVENTORY_LOW_STOCK
  SALES_TREND_ALERT
  REVENUE_MILESTONE
  ORDER_VOLUME_ALERT
  PAYMENT_GATEWAY_ALERT
  WEBSITE_PERFORMANCE_ALERT
}

enum AlertPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  PENDING
  SENT
  FAILED
  RETRYING
}

enum SyncStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

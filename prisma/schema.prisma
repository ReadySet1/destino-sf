generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id              String          @id @db.Uuid
  email           String          @unique
  name            String?
  phone           String?
  role            UserRole        @default(CUSTOMER)
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  orders          Order[]
  cateringOrders  CateringOrder[]
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  squareId    String      @unique
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  categoryId  String      @db.Uuid
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  slug        String?     @unique
  ordinal     BigInt?
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  variants    Variant[]
  spotlightPicks SpotlightPick[]

  @@index([categoryId])
  @@index([ordinal])
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  name        String    @unique
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  squareId    String?   @unique
  products    Product[]
}

model Variant {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String      @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id                        String        @id @default(uuid()) @db.Uuid
  squareOrderId             String?       @unique
  status                    OrderStatus   @default(PENDING)
  total                     Decimal       @db.Decimal(10, 2)
  userId                    String?       @db.Uuid
  customerName              String
  email                     String
  phone                     String
  fulfillmentType           String?       @map("fulfillment_type")
  notes                     String?
  pickupTime                DateTime?     @map("pickup_time")
  deliveryDate              String?       @map("delivery_date")
  deliveryTime              String?       @map("delivery_time")
  shippingMethodName        String?       @map("shipping_method_name")
  shippingCarrier           String?       @map("shipping_carrier")
  shippingServiceLevelToken String?       @map("shipping_service_level_token")
  shippingCostCents         Int?          @map("shipping_cost_cents")
  shippingRateId            String?       @map("shipping_rate_id")
  trackingNumber            String?
  cancelReason              String?
  paymentStatus             PaymentStatus @default(PENDING)
  rawData                   Json?
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  taxAmount                 Decimal       @default(0) @map("tax_amount") @db.Decimal(10, 2)
  isCateringOrder           Boolean       @default(false)
  paymentMethod             PaymentMethod @default(SQUARE)
  items                     OrderItem[]
  payments                  Payment[]
  profile                   Profile?      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([isCateringOrder])
  @@map("orders")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  squarePaymentId String        @unique
  orderId         String        @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  rawData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId])
  @@index([status])
}

model Refund {
  id             String   @id @default(uuid()) @db.Uuid
  squareRefundId String   @unique
  paymentId      String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  reason         String?
  status         String
  rawData        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payment        Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  orderId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
}

model BusinessHours {
  id        String   @id @default(uuid()) @db.Uuid
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreSettings {
  id                    String   @id @default(uuid()) @db.Uuid
  name                  String   @default("Destino SF")
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  phone                 String?
  email                 String?
  taxRate               Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours       Int      @default(2)
  minOrderAmount        Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance      Int      @default(7)
  isStoreOpen           Boolean  @default(true)
  temporaryClosureMsg   String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  cateringMinimumAmount Decimal  @default(0) @db.Decimal(10, 2)
}

model SpotlightPick {
  id                String   @id @default(uuid()) @db.Uuid
  position          Int      @unique
  productId         String?  @map("product_id") @db.Uuid
  customTitle       String?  @map("custom_title")
  customDescription String?  @map("custom_description")
  customImageUrl    String?  @map("custom_image_url")
  customPrice       Decimal? @map("custom_price") @db.Decimal(10, 2)
  isCustom          Boolean  @default(false) @map("is_custom")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  
  // Relations
  product           Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  
  @@index([position])
  @@index([isActive])
  @@index([productId])
  @@map("spotlight_picks")
}

model Subscriber {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model ShippingConfiguration {
  id                          String   @id @default(uuid()) @db.Uuid
  productName                 String   @unique
  baseWeightLb                Decimal  @db.Decimal(10, 2)
  weightPerUnitLb             Decimal  @db.Decimal(10, 2)
  isActive                    Boolean  @default(true)
  applicableForNationwideOnly Boolean  @default(false)
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@index([productName])
  @@index([isActive])
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  FULFILLMENT_UPDATED
  SHIPPING
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

enum PaymentMethod {
  SQUARE
  CASH
  VENMO
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// Catering-specific enums
enum CateringStatus {
  PENDING
  CONFIRMED
  PREPARING
  COMPLETED
  CANCELLED
}

enum CateringPackageType {
  INDIVIDUAL
  FAMILY_STYLE
  BUFFET
  BOXED_LUNCH
}

enum CateringItemCategory {
  STARTER
  ENTREE
  SIDE
  SALAD
  DESSERT
  BEVERAGE
}

// Catering models
model CateringPackage {
  id            String                  @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  minPeople     Int
  pricePerPerson Decimal               @db.Decimal(10, 2)
  type          CateringPackageType
  imageUrl      String?
  isActive      Boolean                 @default(true)
  featuredOrder Int?
  dietaryOptions String[]
  squareCategory String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  
  // Relations
  ratings       CateringRating[]
  items         CateringPackageItem[]
  orderItems    CateringOrderItem[]
}

model CateringItem {
  id            String                  @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  price         Decimal                 @db.Decimal(10, 2)
  category      CateringItemCategory
  isVegetarian  Boolean                 @default(false)
  isVegan       Boolean                 @default(false)
  isGlutenFree  Boolean                 @default(false)
  servingSize   String?
  imageUrl      String?
  isActive      Boolean                 @default(true)
  squareCategory String?
  squareProductId String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  
  // Relations
  packageItems  CateringPackageItem[]
  orderItems    CateringOrderItem[]
  overrides     CateringItemOverrides[]
}

model CateringPackageItem {
  id          String           @id @default(uuid()) @db.Uuid
  packageId   String           @db.Uuid
  itemId      String           @db.Uuid
  quantity    Int
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  // Relations
  package     CateringPackage  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  cateringItem CateringItem    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([packageId, itemId])
  @@index([packageId])
  @@index([itemId])
}

model CateringRating {
  id           String          @id @default(uuid()) @db.Uuid
  packageId    String          @db.Uuid
  rating       Int             @db.SmallInt
  review       String?
  reviewerName String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  
  // Relations
  package      CateringPackage @relation(fields: [packageId], references: [id], onDelete: Cascade)
  
  @@index([packageId])
}

model CateringOrder {
  id                String               @id @default(uuid()) @db.Uuid
  customerId        String?              @db.Uuid
  email             String
  name              String
  phone             String
  eventDate         DateTime
  numberOfPeople    Int
  totalAmount       Decimal              @db.Decimal(10, 2)
  status            CateringStatus       @default(PENDING)
  notes             String?
  specialRequests   String?
  deliveryZone      String?
  deliveryAddress   String?
  deliveryFee       Decimal?             @db.Decimal(10, 2)
  paymentMethod     PaymentMethod        @default(SQUARE)
  paymentStatus     PaymentStatus        @default(PENDING)
  squareOrderId     String?              @unique
  squareCheckoutUrl String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  
  // Relations
  customer        Profile?             @relation(fields: [customerId], references: [id])
  items           CateringOrderItem[]
  
  @@index([customerId])
  @@index([status])
  @@index([eventDate])
  @@index([createdAt])
}

model CateringOrderItem {
  id            String           @id @default(uuid()) @db.Uuid
  orderId       String           @db.Uuid
  itemType      String           // "package" or "item"
  itemId        String?          @db.Uuid
  packageId     String?          @db.Uuid
  name          String
  quantity      Int
  pricePerUnit  Decimal          @db.Decimal(10, 2)
  totalPrice    Decimal          @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  order         CateringOrder    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  item          CateringItem?    @relation(fields: [itemId], references: [id])
  package       CateringPackage? @relation(fields: [packageId], references: [id])
  
  @@index([orderId])
  @@index([itemId])
  @@index([packageId])
}

model CateringItemOverrides {
  id                    String       @id @default(uuid()) @db.Uuid
  itemId                String       @db.Uuid
  localDescription      String?
  localImageUrl         String?
  localIsVegetarian     Boolean?
  localIsVegan          Boolean?
  localIsGlutenFree     Boolean?
  localServingSize      String?
  localDietaryOptions   String[]
  overrideDescription   Boolean      @default(false)
  overrideImage         Boolean      @default(false)
  overrideDietary       Boolean      @default(false)
  overrideServingSize   Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  
  // Relations
  item                  CateringItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  
  @@unique([itemId])
  @@index([itemId])
}

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id         String   @id @db.Uuid
  email      String   @unique
  name       String?
  phone      String?
  role       UserRole @default(CUSTOMER)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  orders     Order[]
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  squareId    String      @unique
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  slug        String?     @unique
  categoryId  String      @db.Uuid
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id])
  variants    Variant[]

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid()) @db.Uuid
  squareId    String?   @unique
  name        String    @unique
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  slug        String?   @unique
  imageUrl    String?
  metadata    Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Variant {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  price           Decimal?    @db.Decimal(10, 2)
  squareVariantId String?     @unique
  productId       String      @db.Uuid
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
  product         Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id                        String        @id @default(uuid()) @db.Uuid
  squareOrderId             String?       @unique
  status                    OrderStatus   @default(PENDING)
  total                     Decimal       @db.Decimal(10, 2)
  userId                    String?       @db.Uuid
  customerName              String
  email                     String
  phone                     String
  fulfillmentType           String?       @map("fulfillment_type") // pickup, local_delivery, nationwide_shipping
  notes                     String? // For storing extra details like delivery instructions or raw fulfillment JSON
  pickupTime                DateTime?     @map("pickup_time") // Used for pickup or as a placeholder for other types if needed
  deliveryDate              String?       @map("delivery_date") // e.g., "YYYY-MM-DD"
  deliveryTime              String?       @map("delivery_time") // e.g., "HH:mm"
  shippingMethodName        String?       @map("shipping_method_name") // User-friendly name, e.g., "USPS Priority Mail"
  shippingCarrier           String?       @map("shipping_carrier") // e.g., "USPS"
  shippingServiceLevelToken String?       @map("shipping_service_level_token") // The token, e.g., "usps_priority"
  shippingCostCents         Int?          @map("shipping_cost_cents") // Cost in cents
  shippingRateId            String?       @map("shipping_rate_id") // Shippo Rate object ID
  trackingNumber            String? // Tracking number for shipped orders - MOVED here for grouping
  cancelReason              String?
  paymentStatus             PaymentStatus @default(PENDING)
  rawData                   Json? // Store raw webhook data, etc.
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt
  profile                   Profile?      @relation(fields: [userId], references: [id])
  items                     OrderItem[]
  payments                  Payment[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("orders") // Ensure this matches your table name
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  squarePaymentId String        @unique
  orderId         String        @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  rawData         Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  refunds         Refund[]

  @@index([orderId])
  @@index([status])
}

model Refund {
  id             String   @id @default(uuid()) @db.Uuid
  squareRefundId String   @unique
  paymentId      String   @db.Uuid
  amount         Decimal  @db.Decimal(10, 2)
  reason         String?
  status         String
  rawData        Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payment        Payment  @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
}

model OrderItem {
  id        String   @id @default(uuid()) @db.Uuid
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String   @db.Uuid
  variantId String?  @db.Uuid
  orderId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  variant   Variant? @relation(fields: [variantId], references: [id])

  @@index([productId])
  @@index([orderId])
  @@index([variantId])
}

model BusinessHours {
  id        String   @id @default(uuid()) @db.Uuid
  day       Int      @unique
  openTime  String?
  closeTime String?
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StoreSettings {
  id                  String   @id @default(uuid()) @db.Uuid
  name                String   @default("Destino SF")
  address             String?
  city                String?
  state               String?
  zipCode             String?
  phone               String?
  email               String?
  taxRate             Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours     Int      @default(2)
  minOrderAmount      Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance    Int      @default(7)
  isStoreOpen         Boolean  @default(true)
  temporaryClosureMsg String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Subscriber {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id             String       @id @default(uuid()) @db.Uuid
  code           String       @unique
  discountType   DiscountType
  discountAmount Decimal      @db.Decimal(10, 2)
  minOrderAmount Decimal?     @db.Decimal(10, 2)
  maxUses        Int?
  timesUsed      Int          @default(0)
  validFrom      DateTime
  validUntil     DateTime?
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
  FULFILLMENT_UPDATED
  SHIPPING // Order has been shipped
  DELIVERED // Order has been delivered
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  COMPLETED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Profile model (links to Supabase Auth)
model Profile {
  id         String    @id
  email      String    @unique
  name       String?
  phone      String?
  role       UserRole  @default(CUSTOMER)
  orders     Order[]
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt

  @@map("profiles") // Match Supabase table name
}

enum UserRole {
  CUSTOMER
  ADMIN
}

// Store models
model Product {
  id          String      @id @default(uuid())
  squareId    String      @unique // Reference to Square catalog item
  name        String
  description String?
  price       Decimal     @db.Decimal(10, 2)
  images      String[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String
  variants    Variant[]
  orderItems  OrderItem[]
  featured    Boolean     @default(false)
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  products    Product[]
  order       Int       @default(0) // For controlling display order
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Variant {
  id            String   @id @default(uuid())
  name          String
  price         Decimal? @db.Decimal(10, 2)
  squareVariantId String? @unique
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([productId])
}

model Order {
  id            String      @id @default(uuid())
  squareOrderId String?     @unique
  status        OrderStatus @default(PENDING)
  items         OrderItem[]
  total         Decimal     @db.Decimal(10, 2)
  profile       Profile?    @relation(fields: [userId], references: [id])
  userId        String?
  customerName  String
  email         String
  phone         String
  pickupTime    DateTime
  notes         String?     @db.Text
  cancelReason  String?
  paymentStatus PaymentStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model OrderItem {
  id          String   @id @default(uuid())
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  variantId   String?
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
  @@index([orderId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  READY
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Other useful models
model BusinessHours {
  id        String   @id @default(uuid())
  day       Int      // 0 = Sunday, 1 = Monday, etc.
  openTime  String?  // Format: HH:MM (24h)
  closeTime String?  // Format: HH:MM (24h)
  isClosed  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([day])
}

model StoreSettings {
  id                 String   @id @default(uuid())
  name               String   @default("Destino SF")
  address            String?
  city               String?
  state              String?
  zipCode            String?
  phone              String?
  email              String?
  taxRate            Decimal  @default(8.25) @db.Decimal(5, 2)
  minAdvanceHours    Int      @default(2) // Minimum hours in advance for pickup orders
  minOrderAmount     Decimal  @default(0) @db.Decimal(10, 2)
  maxDaysInAdvance   Int      @default(7) // Maximum days in advance for pickup orders
  isStoreOpen        Boolean  @default(true)
  temporaryClosureMsg String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("store_settings")
}

// For newsletters and marketing
model Subscriber {
  id        String   @id @default(uuid())
  email     String   @unique
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// For tracking promo codes
model PromoCode {
  id                String    @id @default(uuid())
  code              String    @unique
  discountType      DiscountType
  discountAmount    Decimal   @db.Decimal(10, 2)
  minOrderAmount    Decimal?  @db.Decimal(10, 2)
  maxUses           Int?
  timesUsed         Int       @default(0)
  validFrom         DateTime
  validUntil        DateTime?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}
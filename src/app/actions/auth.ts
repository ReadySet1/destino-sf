'use server';

import { createClient } from '@/utils/supabase/server';
import { encodedRedirect } from '@/utils/redirect';
import { headers } from 'next/headers';
import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import { UserRole } from '@prisma/client'; // Assuming UserRole enum is generated by Prisma

export const signUpAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const password = formData.get('password')?.toString();
  const name = formData.get('name')?.toString();
  const phone = formData.get('phone')?.toString() || null;
  const supabase = await createClient();
  const origin = (await headers()).get('origin');

  if (!email || !password) {
    return { error: 'Email and password are required' };
  }

  const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${origin}/auth/callback`,
    },
  });

  if (signUpError) {
    console.error('Supabase SignUp Error:', signUpError);
    if (signUpError.message.includes('User already registered')) {
      return { error: 'This email is already registered. Please sign in or use a different email.' };
    }
    return { error: `Sign up failed: ${signUpError.message}` };
  }

  if (!signUpData.user) {
     console.error('Supabase SignUp Error: User data missing after sign up.');
     return { error: 'Sign up process failed unexpectedly. Could not retrieve user information.' };
  }

  const userId = signUpData.user.id;

  try {
    await prisma.profile.create({
      data: {
        id: userId,
        email: email,
        name: name || null,
        phone: phone,
        role: UserRole.CUSTOMER,
        updated_at: new Date(),
      },
    });
  } catch (profileError: any) {
    console.error('Prisma profile creation error during sign up:', profileError);
    return { error: `Account created, but profile setup failed: ${profileError.message}. Please contact support.` };
  }

  return {};
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  const supabase = await createClient();

  const { error: signInError } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (signInError) {
    return encodedRedirect('error', '/sign-in', signInError.message);
  }

  // After successful sign-in, get user and their profile
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    // Should not happen after successful sign-in, but handle defensively
    return encodedRedirect('error', '/sign-in', 'Could not retrieve user after sign in.');
  }

  let profile: { role: UserRole } | null = null;
  let profileFetchError: any = null; // Use 'any' or a more specific error type if known

  try { // Try block ONLY for prisma query
    profile = await prisma.profile.findUnique({
      where: { id: user.id },
      select: { role: true }, // Only select the role field
    });
  } catch (dbError) { // Catch ONLY potential database errors
    profileFetchError = dbError; // Store the error
    console.error('Prisma profile fetch error:', JSON.stringify(dbError, null, 2));
    // Redirect immediately if the database query itself fails
    return encodedRedirect('error', '/sign-in', 'Database error retrieving user profile.');
  }

  // Handle profile not found case (outside the try...catch)
  if (!profile) {
    // Log the specific error for tracking
    console.error(`Sign-in error: Profile not found for user ${user.id}`);
    
    try {
      // Auto-create a basic profile for the user with default role
      const authName = user.user_metadata?.name as string | undefined;
      const authPhone = user.user_metadata?.phone as string | undefined;
      
      profile = await prisma.profile.create({
        data: {
          id: user.id,
          email: user.email || email,
          name: authName || null,
          phone: authPhone || null,
          role: UserRole.CUSTOMER,
          updated_at: new Date(),
        },
        select: { role: true },
      });
      
      console.log(`Created new profile for user ${user.id} during sign-in`);
      
    } catch (createError) {
      console.error(`Failed to create profile for user ${user.id} during sign-in:`, createError);
      // If profile creation fails, inform the user with a clear error message
      return encodedRedirect('error', '/sign-in', 'User profile could not be created. Please contact support.');
    }
    
    // Double-check that profile was created successfully
    if (!profile) {
      return encodedRedirect('error', '/sign-in', 'Unable to create user profile. Please contact support.');
    }
  }

  // Profile fetched or created successfully, perform redirect based on role
  if (profile.role === UserRole.ADMIN) { // Use Prisma enum for role comparison
    return redirect('/admin');
  } else {
    // Redirect non-admins to the menu page
    return redirect('/menu'); // Changed from '/products'
  }
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get('origin');
  const callbackUrl = formData.get('callbackUrl')?.toString();

  if (!email) {
    return encodedRedirect('error', '/forgot-password', 'Email is required');
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect('error', '/forgot-password', 'Could not reset password');
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    'success',
    '/forgot-password',
    'Check your email for a link to reset your password.'
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get('password') as string;
  const confirmPassword = formData.get('confirmPassword') as string;

  if (!password || !confirmPassword) {
    return encodedRedirect(
      'error',
      '/protected/reset-password',
      'Password and confirm password are required'
    );
  }

  if (password !== confirmPassword) {
    return encodedRedirect('error', '/protected/reset-password', 'Passwords do not match');
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    return encodedRedirect('error', '/protected/reset-password', 'Password update failed');
  }

  // Redirect to account page with success message
  return encodedRedirect('success', '/account', 'Your password has been updated successfully');
};

export const signOutAction = async () => {
  const supabase = await createClient();
  await supabase.auth.signOut();
  return redirect('/sign-in');
}; 
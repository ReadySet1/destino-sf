'use server';

import { createClient } from '@/utils/supabase/server';
import { encodedRedirect } from '@/utils/utils';
import { headers, cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { UserRole, OrderStatus, Prisma } from '@prisma/client'; // Assuming UserRole enum is generated by Prisma
import { z } from 'zod';
import { formatISO, parseISO } from 'date-fns'; // Ensure date-fns is imported
import { randomUUID } from 'crypto'; // <-- Import randomUUID
import { Shippo } from 'shippo';
import Decimal from 'decimal.js'; // Re-add Decimal import
import type { ShipmentCreateRequest } from 'shippo'; // Import the type
import { createServerClient, type CookieOptions } from '@supabase/ssr';
import type { Database } from '@/types/supabase'; // Add this import

// Re-add BigInt patch if needed directly in actions, or ensure it runs globally
(BigInt.prototype as any).toJSON = function() {
  return this.toString();
};

// --- Constants ---
const TAX_RATE = new Decimal(0.0825); // 8.25%
const SERVICE_FEE_RATE = new Decimal(0.035); // 3.5%

// Define addressSchema directly within this file
const addressSchema = z.object({
  recipientName: z.string().optional(),
  street: z.string().min(1, 'Street address is required'),
  street2: z.string().optional(),
  city: z.string().min(1, 'City is required'),
  state: z.string().min(1, 'State is required'),
  postalCode: z.string().min(5, 'Valid postal code is required'),
  country: z.string().min(2, 'Country is required').default('US'),
});

// --- Validation Schemas (Define or import as needed) ---
const CustomerInfoSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  phone: z.string().min(1),
  pickupTime: z.string().optional(), // Validate format if always present for pickup
});

// --- EXTEND FulfillmentSchema ---
const FulfillmentBaseSchema = z.object({
  method: z.enum(['pickup', 'local_delivery', 'nationwide_shipping']),
});

const PickupSchema = FulfillmentBaseSchema.extend({
  method: z.literal('pickup'),
  pickupTime: z.string(), // Expecting ISO format string like "YYYY-MM-DDTHH:mm:ss"
});

const LocalDeliverySchema = FulfillmentBaseSchema.extend({
  method: z.literal('local_delivery'),
  deliveryDate: z.string(),
  deliveryTime: z.string(),
  deliveryAddress: addressSchema,
  deliveryInstructions: z.string().optional(),
});

const NationwideShippingSchema = FulfillmentBaseSchema.extend({
  method: z.literal('nationwide_shipping'),
  shippingAddress: addressSchema,
  shippingMethod: z.string(),      // Service level TOKEN (e.g., "usps_priority")
  shippingCarrier: z.string(), // Carrier name (e.g., "USPS")
  shippingCost: z.number().positive().int(), // Cost in cents (now required as it's selected)
  rateId: z.string(), // Shippo Rate ID (now required)
});

const FulfillmentSchema = z.discriminatedUnion('method', [
  PickupSchema,
  LocalDeliverySchema,
  NationwideShippingSchema,
]);

const CartItemSchema = z.object({
  id: z.string(), // Your internal Product ID
  name: z.string(),
  price: z.number(), // Price per item in DOLLARS (e.g., 12.99)
  quantity: z.number().min(1),
  variantId: z.string().optional(),
  // Add other necessary fields like image, variant name etc. if needed for Square
});

const CreateOrderSchema = z.object({
  items: z.array(CartItemSchema).min(1),
  customerInfo: CustomerInfoSchema,
  fulfillment: FulfillmentSchema,
});
// --- End Schemas ---

// Helper to map country code (reuse from API route or define here)
const mapCountryCode = (code: string | undefined): string | undefined => {
    if (!code) return undefined;
    const upperCaseCode = code.toUpperCase();
    if (['US', 'CA'].includes(upperCaseCode)) return upperCaseCode;
    console.warn(`Unsupported country code: ${code}. Returning original.`);
    return upperCaseCode;
}

export const signUpAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const password = formData.get('password')?.toString();
  const name = formData.get('name')?.toString();
  const phone = formData.get('phone')?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get('origin');

  if (!email || !password) {
    return { error: 'Email and password are required' };
  }

  try {
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${origin}/auth/callback`,
        data: {
          name: name || null,
          phone: phone || null,
        }
      },
    });

    if (error) {
      console.error('Supabase SignUp Error:', error);
      // Consider mapping common errors to user-friendly messages
      if (error.message.includes('User already registered')) {
        return { error: 'This email is already registered. Please sign in or use a different email.' };
      }
      // Add more specific error checks if needed
      return { error: `Sign up failed: ${error.message}` };
    }

    // Successfully initiated sign up (user needs to confirm email)
    return {};
  } catch (exception: any) {
    console.error('Exception during Supabase SignUp:', exception);
    return { error: `An unexpected error occurred during sign up: ${exception.message || 'Unknown error'}` };
  }
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  const supabase = await createClient();

  const { error: signInError } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (signInError) {
    return encodedRedirect('error', '/sign-in', signInError.message);
  }

  // After successful sign-in, get user and their profile
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    // Should not happen after successful sign-in, but handle defensively
    return encodedRedirect('error', '/sign-in', 'Could not retrieve user after sign in.');
  }

  let profile: { role: UserRole } | null = null;
  let profileFetchError: any = null; // Use 'any' or a more specific error type if known

  try { // Try block ONLY for prisma query
    profile = await prisma.profile.findUnique({
      where: { id: user.id },
      select: { role: true }, // Only select the role field
    });
  } catch (dbError) { // Catch ONLY potential database errors
    profileFetchError = dbError; // Store the error
    console.error('Prisma profile fetch error:', JSON.stringify(dbError, null, 2));
    // Redirect immediately if the database query itself fails
    return encodedRedirect('error', '/sign-in', 'Database error retrieving user profile.');
  }

  // Handle potential DB error caught earlier (though we already redirected, belt-and-suspenders)
  if (profileFetchError) {
     // This path might be redundant if the catch block always returns/redirects,
     // but kept for robustness in case return logic changes.
     return encodedRedirect('error', '/sign-in', 'Failed to retrieve user profile due to a database error.');
  }

  // Handle profile not found case (outside the try...catch)
  if (!profile) {
    // Handle case where profile might not exist yet (though handle_new_user should prevent this)
    console.warn(`Profile not found for user ${user.id} after sign in.`);
    return encodedRedirect('error', '/sign-in', 'User profile not found.');
  }

  // Profile fetched successfully, perform redirect based on role (outside the try...catch)
  if (profile.role === UserRole.ADMIN) { // Use Prisma enum for role comparison
    return redirect('/admin');
  } else {
    // Redirect non-admins to the products page
    return redirect('/products'); // Changed from '/'
  }
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get('origin');
  const callbackUrl = formData.get('callbackUrl')?.toString();

  if (!email) {
    return encodedRedirect('error', '/forgot-password', 'Email is required');
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect('error', '/forgot-password', 'Could not reset password');
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    'success',
    '/forgot-password',
    'Check your email for a link to reset your password.'
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get('password') as string;
  const confirmPassword = formData.get('confirmPassword') as string;

  if (!password || !confirmPassword) {
    encodedRedirect(
      'error',
      '/protected/reset-password',
      'Password and confirm password are required'
    );
  }

  if (password !== confirmPassword) {
    encodedRedirect('error', '/protected/reset-password', 'Passwords do not match');
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    encodedRedirect('error', '/protected/reset-password', 'Password update failed');
  }

  encodedRedirect('success', '/protected/reset-password', 'Password updated');
};

export const signOutAction = async () => {
  const supabase = await createClient();
  await supabase.auth.signOut();
  return redirect('/sign-in');
};

// Types for fulfillment data
interface Address {
  street: string;
  street2?: string;
  city: string;
  state: string;
  postalCode: string;
  country: string;
  recipientName?: string;
}

interface PickupFulfillment {
  method: 'pickup';
  pickupTime: string;
}

interface DeliveryFulfillment {
  method: 'delivery';
  deliveryAddress: Address;
  deliveryTime: string;
  deliveryInstructions?: string;
}

interface ShippingFulfillment {
  method: 'shipping';
  shippingAddress: Address;
  shippingMethod: string;
}

// --- NEW: Local Delivery Fulfillment ---
interface LocalDeliveryFulfillment {
  method: 'local_delivery';
  deliveryAddress: Address;
  deliveryDate: string;
  deliveryTime: string;
  deliveryInstructions?: string;
}

// --- NEW: Nationwide Shipping Fulfillment ---
interface NationwideShippingFulfillment {
  method: 'nationwide_shipping';
  shippingAddress: Address;
  shippingMethod: string;
  shippingCost?: number; // Cost in cents
  shippingCarrier?: string; // Optional carrier
  rateId?: string; // Optional Shippo rate ID
}

// Export this type
export type FulfillmentData =
  | PickupFulfillment
  | DeliveryFulfillment
  | ShippingFulfillment
  | LocalDeliveryFulfillment
  | NationwideShippingFulfillment;

type OrderItem = {
  id: string;
  quantity: number;
  price: number;
  product: {
    name: string;
  };
  variant?: {
    name: string;
  } | null;
};

// --- Add Server Action Return Type --- 
type ServerActionResult = {
  success: boolean;
  error: string | null;
  checkoutUrl: string | null;
  orderId: string | null;
};

/**
 * Creates an order in the database
 */
export async function createOrder(orderData: {
  items: Array<{
    id: string;
    quantity: number;
    price: number;
    variantId?: string;
  }>;
  customerInfo: {
    name: string;
    email: string;
    phone: string;
    pickupTime: string;
  };
  squareOrderId?: string;
  fulfillmentData?: FulfillmentData;
}) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();
    
    // Calculate total price
    const totalPrice = orderData.items.reduce(
      (sum, item) => sum + (item.price * item.quantity),
      0
    );
    
    // Prepare order data with base fields
    const orderCreateData: any = {
      squareOrderId: orderData.squareOrderId,
      status: 'PENDING',
      total: totalPrice,
      userId: user?.id, // Will be null for guest checkout
      customerName: orderData.customerInfo.name,
      email: orderData.customerInfo.email,
      phone: orderData.customerInfo.phone,
      paymentStatus: 'PENDING',
      items: {
        create: orderData.items.map(item => ({
          quantity: item.quantity,
          price: item.price,
          productId: item.id,
          variantId: item.variantId
        }))
      }
    };
    
    // Set pickup time based on fulfillment method
    if (orderData.fulfillmentData) {
      const { method } = orderData.fulfillmentData;
      
      // Store fulfillment details in the notes field (as JSON)
      orderCreateData.notes = JSON.stringify(orderData.fulfillmentData);
      
      if (method === 'pickup') {
        // For pickup, use the pickup time from fulfillment data
        orderCreateData.pickupTime = new Date(orderData.fulfillmentData.pickupTime);
      } else if (method === 'delivery') {
        // For delivery, use delivery time as pickup time
        orderCreateData.pickupTime = new Date(orderData.fulfillmentData.deliveryTime);
      } else {
        // For shipping, use the current time as a placeholder
        orderCreateData.pickupTime = new Date();
      }
    } else {
      // Fallback to the customer info pickup time
      orderCreateData.pickupTime = new Date(orderData.customerInfo.pickupTime);
    }
    
    // Create order in database
    const order = await prisma.order.create({
      data: orderCreateData,
      include: {
        items: true
      }
    });
    
    return { success: true, orderId: order.id };
  } catch (error) {
    console.error('Error creating order:', error);
    return { success: false, error: 'Failed to create order' };
  }
}

/**
 * Updates an order with Square payment information
 */
export async function updateOrderPayment(orderId: string, squareOrderId: string) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    await prisma.order.update({
      where: { id: orderId },
      data: {
        squareOrderId,
        paymentStatus: 'PAID'
      }
    });
    
    return { success: true };
  } catch (error) {
    console.error('Error updating order payment:', error);
    return { success: false, error: 'Failed to update order payment' };
  }
}

/**
 * Retrieves order details by ID
 */
export async function getOrderById(orderId: string) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            product: true,
            variant: true
          }
        }
      }
    });

    if (!order) {
      return { success: false, error: 'Order not found' };
    }

    // Parse fulfillment data if available
    let fulfillmentDetails = null;
    // TODO: Enhance parsing based on new DB fields? For now, parse notes.
    if (order.notes) {
      try {
        fulfillmentDetails = JSON.parse(order.notes);
      } catch (e) {
        console.error('Error parsing fulfillment data from notes:', e);
      }
    }

    return {
      success: true,
      order: {
        id: order.id,
        status: order.status,
        totalAmount: Number(order.total),
        customerName: order.customerName,
        email: order.email,
        phone: order.phone,
        // Handle potentially null pickupTime
        pickupTime: order.pickupTime ? order.pickupTime.toISOString() : null,
        paymentStatus: order.paymentStatus,
        createdAt: order.createdAt.toISOString(),
        // Include new fields (add more as needed for display)
        fulfillmentType: order.fulfillmentType,
        shippingMethodName: order.shippingMethodName,
        shippingCarrier: order.shippingCarrier,
        trackingNumber: order.trackingNumber,
        // fulfillment: fulfillmentDetails, // Keep parsed notes for now?
        items: order.items.map((item) => ({
          id: item.id,
          name: item.product.name,
          quantity: item.quantity,
          price: Number(item.price),
          variantName: item.variant?.name
        }))
      }
    };
  } catch (error) {
    console.error('Error retrieving order:', error);
    return { success: false, error: 'Failed to retrieve order' };
  }
}

// Server Action Implementation
export async function createOrderAndGenerateCheckoutUrl(formData: {
    items: z.infer<typeof CartItemSchema>[];
    customerInfo: z.infer<typeof CustomerInfoSchema>;
    fulfillment: z.infer<typeof FulfillmentSchema>; // Use the discriminated union type
}): Promise<ServerActionResult> {
    console.log("Server Action: createOrderAndGenerateCheckoutUrl started.");
    console.log("Received Fulfillment Data:", JSON.stringify(formData.fulfillment, null, 2)); // Log received fulfillment
    const cookieStore = await cookies();
    const supabase = createServerClient<Database>(
        process.env.NEXT_PUBLIC_SUPABASE_URL!,
        process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
        {
            cookies: {
                get(name: string) {
                    return cookieStore.get(name)?.value;
                },
                set(name: string, value: string, options: CookieOptions) {
                    try {
                        cookieStore.set({ name, value, ...options });
                    } catch (error) {
                        // The `set` method was called from a Server Component.
                        // This can be ignored if you have middleware refreshing
                        // user sessions.
                    }
                },
                remove(name: string, options: CookieOptions) {
                    try {
                        cookieStore.set({ name, value: '', ...options });
                    } catch (error) {
                        // The `delete` method was called from a Server Component.
                        // This can be ignored if you have middleware refreshing
                        // user sessions.
                    }
                },
            },
        }
    );
    const { data: { user } } = await supabase.auth.getUser();
    const supabaseUserId = user?.id;

    const { items, customerInfo, fulfillment } = formData;

    // --- Constants ---
    const TAX_RATE = new Decimal(0.0825);
    const SERVICE_FEE_RATE = new Decimal(0.035);

    // --- Calculate Totals ---
    let subtotal = new Decimal(0);
    const orderItemsData = items.map(item => {
        const itemPrice = new Decimal(item.price);
        const itemTotal = itemPrice.times(item.quantity);
        subtotal = subtotal.plus(itemTotal);
        return {
            productId: item.id,
            variantId: item.variantId,
            quantity: item.quantity,
            price: itemPrice, // Keep as Decimal for DB
        };
    });

    const taxAmount = subtotal.times(TAX_RATE).toDecimalPlaces(2);

    // Get shipping cost directly from the validated fulfillment data if applicable
    const shippingCostCents = fulfillment.method === 'nationwide_shipping' ? fulfillment.shippingCost : 0; // Now required in schema, default 0 otherwise
    const shippingCostDecimal = new Decimal(shippingCostCents).dividedBy(100);

    const totalBeforeFee = subtotal.plus(taxAmount).plus(shippingCostDecimal);
    const serviceFeeAmount = totalBeforeFee.times(SERVICE_FEE_RATE).toDecimalPlaces(2);
    const finalTotal = totalBeforeFee.plus(serviceFeeAmount);

    console.log(`Calculated Subtotal: ${subtotal.toFixed(2)}`);
    console.log(`Calculated Tax: ${taxAmount.toFixed(2)}`);
    console.log(`Calculated Shipping: ${shippingCostDecimal.toFixed(2)} (Cents: ${shippingCostCents})`);
    console.log(`Calculated Service Fee: ${serviceFeeAmount.toFixed(2)}`);
    console.log(`Calculated Final Total: ${finalTotal.toFixed(2)}`);

    // --- Prepare Fulfillment DB Data ---
    let dbFulfillmentData: {
        fulfillmentType: string;
        pickupTime?: Date;
        deliveryDate?: string;
        deliveryTime?: string;
        shippingMethodName?: string;
        shippingCarrier?: string;
        shippingServiceLevelToken?: string;
        shippingCostCents?: number;
        shippingRateId?: string;
        notes?: string; // Keep notes for additional details like delivery instructions
    } = {
        fulfillmentType: fulfillment.method,
        notes: undefined, // Initialize notes
    };

    let pickupTimeISO: string | null = null; // Still needed for Square

    try { // Separate try for parsing potentially invalid dates/preparing fulfillment data
        if (fulfillment.method === 'pickup') {
            pickupTimeISO = formatISO(parseISO(fulfillment.pickupTime));
            dbFulfillmentData.pickupTime = new Date(pickupTimeISO);
        } else if (fulfillment.method === 'local_delivery') {
            dbFulfillmentData.deliveryDate = fulfillment.deliveryDate;
            dbFulfillmentData.deliveryTime = fulfillment.deliveryTime;
            // Store address and instructions in notes for now
            dbFulfillmentData.notes = JSON.stringify({
                 deliveryAddress: fulfillment.deliveryAddress,
                 deliveryInstructions: fulfillment.deliveryInstructions,
            });
             // Set a placeholder pickupTime if your DB schema requires it (adjust if needed)
             dbFulfillmentData.pickupTime = new Date();
        } else if (fulfillment.method === 'nationwide_shipping') {
            // We now have dedicated fields for shipping details
            dbFulfillmentData.shippingMethodName = `${fulfillment.shippingCarrier} ${fulfillment.shippingMethod}`; // Construct a name
            dbFulfillmentData.shippingCarrier = fulfillment.shippingCarrier;
            dbFulfillmentData.shippingServiceLevelToken = fulfillment.shippingMethod; // This is the token
            dbFulfillmentData.shippingCostCents = fulfillment.shippingCost; // Already validated as number/int
            dbFulfillmentData.shippingRateId = fulfillment.rateId; // Already validated as string
             // Store address in notes for now
             dbFulfillmentData.notes = JSON.stringify({
                 shippingAddress: fulfillment.shippingAddress,
             });
            // Set a placeholder pickupTime if your DB schema requires it (adjust if needed)
            dbFulfillmentData.pickupTime = new Date();
        }
    } catch (dateError: any) {
         console.error("Invalid date format provided for fulfillment:", dateError);
         return { success: false, error: "Invalid date/time format for fulfillment.", checkoutUrl: null, orderId: null };
    }

    // --- Database Order Creation ---
    let dbOrder: { id: string } | null = null;
    try {
        dbOrder = await prisma.order.create({
            data: {
                userId: supabaseUserId,
                status: 'PENDING',
                paymentStatus: 'PENDING',
                total: finalTotal, // Prisma handles Decimal now
                customerName: customerInfo.name,
                email: customerInfo.email,
                phone: customerInfo.phone,
                // Spread the prepared fulfillment data
                ...dbFulfillmentData,
                // pickupTime is handled within dbFulfillmentData conditionally

                items: {
                    create: orderItemsData.map(item => ({
                        productId: item.productId,
                        variantId: item.variantId,
                        quantity: item.quantity,
                        price: item.price, // Pass Decimal directly
                    })),
                },
            },
            select: { id: true },
        });
        console.log(`Database order created with ID: ${dbOrder.id}`);
    } catch (error: any) {
        console.error("Database Error creating order:", error);
        // Check for specific Prisma errors if needed
        if (error instanceof Prisma.PrismaClientKnownRequestError) {
             console.error("Prisma Error Code:", error.code);
             console.error("Prisma Meta:", error.meta);
        }
        return { success: false, error: error.message || "Failed to save order details.", checkoutUrl: null, orderId: null };
    }

    // --- Square API Interaction ---
    // ... (Keep Square ENV variable checks) ...
    const locationId = process.env.SQUARE_LOCATION_ID;
    const accessToken = process.env.SQUARE_ACCESS_TOKEN;
    const squareEnv = process.env.SQUARE_ENVIRONMENT;
    const supportEmail = process.env.SUPPORT_EMAIL; // Assuming you might use this

    if (!locationId || !accessToken || !squareEnv) {
        console.error('Server Action Config Error: Missing Square ENV variables.');
        // Attempt to update the created order to failed before returning
        if (dbOrder?.id) {
             await prisma.order.update({ where: { id: dbOrder.id }, data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED', notes: 'Square config error' } }).catch(e => console.error("Failed to update order status on config error:", e));
        }
        return { success: false, error: 'Server configuration error.', checkoutUrl: null, orderId: dbOrder?.id ?? null };
    }


    const BASE_URL = squareEnv === 'sandbox'
        ? 'https://connect.squareupsandbox.com'
        : 'https://connect.squareup.com';

    try {
        // --- Prepare Square Line Items ---
        const squareLineItems = items.map(item => ({
            quantity: item.quantity.toString(),
            base_price_money: {
                 amount: Math.round(item.price * 100), // Price in cents
                 currency: "USD"
            },
            name: item.name,
            // TODO: Add variation_name if variantId is present?
            // variation_name: item.variantId ? LOOKUP_VARIANT_NAME : undefined,
        }));

        // Add shipping as a line item if applicable
        if (fulfillment.method === 'nationwide_shipping' && fulfillment.shippingCost > 0) {
            squareLineItems.push({
                name: dbFulfillmentData.shippingMethodName || `Shipping (${fulfillment.shippingCarrier})`, // Use constructed name or fallback
                quantity: '1',
                base_price_money: { amount: fulfillment.shippingCost, currency: 'USD' }, // Use cost in cents
            });
        }

        // --- Prepare Square Service Charges ---
        const squareServiceCharges = [];
        if (serviceFeeAmount.greaterThan(0)) {
            squareServiceCharges.push({
                name: 'Service Fee', // Keep it simple? Or "Merchant Service Fee"
                amount_money: { amount: Math.round(serviceFeeAmount.toNumber() * 100), currency: 'USD' },
                calculation_phase: 'TOTAL_PHASE', // Apply after tax and shipping
                taxable: false,
            });
        }

        // --- Prepare Square Taxes ---
         const squareTaxes = [];
         if (taxAmount.greaterThan(0)) {
             squareTaxes.push({
                 // uid: randomUUID().substring(0, 6), // Optional: helps Square UI if taxes change
                 name: 'Sales Tax',
                 percentage: TAX_RATE.times(100).toFixed(2), // e.g., "8.25"
                 scope: 'ORDER', // Apply to the whole order before service fees
             });
         }


        // --- Prepare Square Fulfillment ---
        let squareFulfillmentData: any = { type: undefined }; // Start with undefined type
        const squareRecipient = { // Define recipient once
            display_name: customerInfo.name,
            email_address: customerInfo.email,
            phone_number: customerInfo.phone,
        };

        if (fulfillment.method === 'pickup' && pickupTimeISO) {
             squareFulfillmentData = {
                 type: 'PICKUP',
                 pickup_details: {
                     recipient: squareRecipient,
                     pickup_at: pickupTimeISO, // Use ISO string
                     schedule_type: 'SCHEDULED',
                 }
             };
        } else if (fulfillment.method === 'local_delivery' && fulfillment.deliveryAddress) {
             const address = fulfillment.deliveryAddress;
             squareFulfillmentData = {
                 type: 'DELIVERY',
                 delivery_details: {
                     recipient: {
                         ...squareRecipient, // Spread common details
                         // Add address specific details if needed, Square uses top-level address block now
                         address: {
                             address_line_1: address.street,
                             address_line_2: address.street2,
                             locality: address.city,
                             administrative_district_level_1: address.state,
                             postal_code: address.postalCode,
                             country: mapCountryCode(address.country) || 'US', // Use helper and default
                         },
                     },
                     schedule_type: 'SCHEDULED',
                     // Combine date and time for Square. Ensure format is valid RFC 3339
                     placed_at: new Date().toISOString(), // Example, when order was placed
                     deliver_at: formatISO(parseISO(`${fulfillment.deliveryDate}T${fulfillment.deliveryTime}:00`)), // Example: Combine date/time
                     // delivery_window: { start_at: formatISO(parseISO(`${fulfillment.deliveryDate}T${fulfillment.deliveryTime}:00`)) }, // Use deliver_at
                     delivery_instructions: fulfillment.deliveryInstructions,
                     carrier_code: 'CUSTOM', // Indicate it's local delivery not a major carrier
                 }
             };
        } else if (fulfillment.method === 'nationwide_shipping' && fulfillment.shippingAddress) {
             const address = fulfillment.shippingAddress;
             squareFulfillmentData = {
                 type: 'SHIPMENT',
                 shipment_details: {
                     recipient: {
                         ...squareRecipient, // Spread common details
                         address: {
                             address_line_1: address.street,
                             address_line_2: address.street2,
                             locality: address.city,
                             administrative_district_level_1: address.state,
                             postal_code: address.postalCode,
                             country: mapCountryCode(address.country) || 'US', // Use helper and default
                         },
                     },
                     // Use the service level token for shipping_type
                     shipping_type: fulfillment.shippingMethod, // This is the token, e.g., "usps_priority"
                     carrier_code: fulfillment.shippingCarrier, // Pass the carrier code (e.g., "USPS")
                     // shipping_note: `Shippo Rate ID: ${fulfillment.rateId}`, // Optional note
                 }
             };
        }

        // --- Prepare Square Checkout Options ---
        const origin = process.env.NEXT_PUBLIC_APP_URL;
        if (!origin) {
            console.error('Server Action Config Error: NEXT_PUBLIC_APP_URL is not set.');
             if (dbOrder?.id) { await prisma.order.update({ where: { id: dbOrder.id }, data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED', notes: 'Missing base URL config' } }).catch(e => console.error("Failed to update order status on config error:", e)); }
            return { success: false, error: 'Server configuration error: Base URL missing.', checkoutUrl: null, orderId: dbOrder?.id ?? null };
        }
        const redirectUrl = `${origin}/order-confirmation?status=success&orderId=${dbOrder.id}`;
        const cancelUrl = `${origin}/cart?status=cancelled&orderId=${dbOrder.id}`; // Include orderId in cancel URL too

        const squareCheckoutOptions = {
            allow_tipping: false, // Configure as needed
            redirect_url: redirectUrl,
            merchant_support_email: supportEmail || customerInfo.email, // Use support email or fallback
            ask_for_shipping_address: false, // We provide it in fulfillment
            accepted_payment_methods: {
                apple_pay: true,
                google_pay: true,
                cash_app_pay: false, // Configure as needed
                afterpay_clearpay: false, // Configure as needed
            },
        };

        // --- Build Full Square Request Body ---
        const squareRequestBody = {
            idempotency_key: randomUUID(),
            order: {
                location_id: locationId,
                reference_id: dbOrder.id, // Link to our DB order ID
                customer_id: undefined, // TODO: Link if Square Customer profile exists?
                line_items: squareLineItems,
                taxes: squareTaxes,
                service_charges: squareServiceCharges,
                fulfillments: squareFulfillmentData.type ? [squareFulfillmentData] : [], // Only add if type is defined
                metadata: supabaseUserId ? { supabaseUserId: supabaseUserId } : undefined,
            },
            checkout_options: squareCheckoutOptions,
            // pre_populated_data: { // Optionally pre-fill buyer info if not using Square customer_id
            //     buyer_email: customerInfo.email,
            //     buyer_phone_number: customerInfo.phone,
            //     buyer_address: undefined // Address is handled by fulfillment
            // }
        };

        console.log("Calling Square Create Payment Link API...");
        // console.log("Square Request Body:", JSON.stringify(squareRequestBody, null, 2)); // Careful logging PII
        const paymentLinkUrl = `${BASE_URL}/v2/online-checkout/payment-links`;
        const fetchResponse = await fetch(paymentLinkUrl, {
             method: 'POST',
             headers: {
                 'Square-Version': '2023-10-18', // Use a recent, stable version
                 'Authorization': `Bearer ${accessToken}`,
                 'Content-Type': 'application/json',
             },
             body: JSON.stringify(squareRequestBody),
        });
        const responseData = await fetchResponse.json();

        if (!fetchResponse.ok || !responseData.payment_link?.url || !responseData.payment_link?.order_id) {
             console.error('Square API Error response:', JSON.stringify(responseData, null, 2));
             const errorDetail = responseData.errors?.[0]?.detail || 'Failed to create Square payment link';
             await prisma.order.update({
                 where: { id: dbOrder.id },
                 data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED', notes: `Square API Error: ${errorDetail}` }
             }).catch(e => console.error("Failed to update order status on Square error:", e));
             return { success: false, error: errorDetail, checkoutUrl: null, orderId: dbOrder.id };
        }

        const checkoutUrl = responseData.payment_link.url;
        const squareOrderId = responseData.payment_link.order_id; // This is the Square Order ID associated with the payment link
        console.log(`Square Checkout URL: ${checkoutUrl}, Square Order ID: ${squareOrderId}`);

        // Update our order with the Square Order ID
        await prisma.order.update({
             where: { id: dbOrder.id },
             data: { squareOrderId: squareOrderId } // Update the squareOrderId field
        });

        console.log("Server Action finished successfully.");
        revalidatePath('/admin/orders'); // Revalidate admin list
        revalidatePath(`/admin/orders/${dbOrder.id}`); // Revalidate specific order detail page if exists
        revalidatePath('/orders'); // Revalidate user's order list page if exists
        revalidatePath(`/orders/${dbOrder.id}`); // Revalidate user's specific order page if exists

        return { success: true, error: null, checkoutUrl: checkoutUrl, orderId: dbOrder.id };

    } catch (error: any) {
        console.error("Error during Square API interaction or final update:", error);
        const errorMessage = error.message || "An unexpected error occurred during checkout.";
        if (dbOrder?.id) { /* Check dbOrder before update */
             try {
                  // Update order status to reflect the failure
                  await prisma.order.update({
                       where: { id: dbOrder.id },
                       data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED', notes: `Checkout Error: ${errorMessage}` }
                  });
             } catch (updateError: any) {
                  console.error("Failed to update order status on final catch block:", updateError?.message);
             }
        }
        // Return the error and the DB order ID if available
        return { success: false, error: errorMessage, checkoutUrl: null, orderId: dbOrder?.id || null };
    }
}

// Define input schema for the new action
const shippingRateRequestSchema = z.object({
  shippingAddress: addressSchema,
  // TODO: Add product dimensions/weight calculation logic here
  // For now, using a placeholder weight
  estimatedWeightLb: z.number().positive(),
  estimatedLengthIn: z.number().positive().optional().default(10),
  estimatedWidthIn: z.number().positive().optional().default(8),
  estimatedHeightIn: z.number().positive().optional().default(4),
});

// Define the structure for the returned rates
export interface ShippingRate {
  id: string;       // Shippo Rate object ID
  name: string;     // e.g., "USPS Priority Mail (Est. 2 days)"
  amount: number;   // Cost in cents
  carrier: string;  // e.g., "USPS"
  serviceLevelToken: string; // e.g., "usps_priority"
  estimatedDays?: number;
}

// Define the input type based on the schema
type ShippingRateRequestInput = z.infer<typeof shippingRateRequestSchema>;

// --- Server Action Implementation: getShippingRates (Updated Payload Keys) ---
export async function getShippingRates(
  input: ShippingRateRequestInput
): Promise<{ success: boolean; rates?: ShippingRate[]; error?: string }> {
    console.log("Server Action: getShippingRates started with input:", input);

    const apiKey = process.env.SHIPPO_API_KEY;
    if (!apiKey) {
        console.error("Shippo API Key not configured.");
        return { success: false, error: "Shipping provider configuration error." };
    }

    // Define origin address *within* the scope where it's needed or pass it
    const originAddress = {
        name: process.env.SHIPPING_ORIGIN_NAME,
        street1: process.env.SHIPPING_ORIGIN_STREET1,
        city: process.env.SHIPPING_ORIGIN_CITY,
        state: process.env.SHIPPING_ORIGIN_STATE,
        zip: process.env.SHIPPING_ORIGIN_ZIP,
        country: process.env.SHIPPING_ORIGIN_COUNTRY || 'US',
        phone: process.env.SHIPPING_ORIGIN_PHONE,
        email: process.env.SHIPPING_ORIGIN_EMAIL,
    };
    
    if (!originAddress.street1 || !originAddress.city || !originAddress.state || !originAddress.zip) {
      console.error("Missing required shipping origin address details in environment variables.");
      return { success: false, error: "Shipping origin configuration error." };
    }

    const shippo = new Shippo({ // Define shippo client instance
        apiKeyHeader: apiKey,
    });

    const { shippingAddress, estimatedWeightLb, estimatedLengthIn, estimatedWidthIn, estimatedHeightIn } = input;

    try {
        console.log("Creating shipment object with Shippo...");

        const parcelData = {
            length: estimatedLengthIn?.toString() ?? '10',
            width: estimatedWidthIn?.toString() ?? '8',
            height: estimatedHeightIn?.toString() ?? '4',
            distance_unit: 'in' as const,
            weight: estimatedWeightLb.toString(),
            mass_unit: 'lb' as const,
        };
        // console.log("Parcel Data:", parcelData);

        const addressToData = {
            name: shippingAddress.recipientName || '',
            street1: shippingAddress.street,
            street2: shippingAddress.street2,
            city: shippingAddress.city,
            state: shippingAddress.state,
            zip: shippingAddress.postalCode,
            country: shippingAddress.country || 'US',
            validate: false,
        };
        // console.log("Address To Data:", addressToData);

        // Use camelCase keys for Shippo SDK
        const shipmentPayload = {
            addressFrom: originAddress, // camelCase
            addressTo: addressToData,   // camelCase
            parcels: [parcelData],
            async: false
        } as any; // Use type assertion to any to avoid TypeScript errors
        
        const shipmentResult: any = await shippo.shipments.create(shipmentPayload); // Use any type for result
        // console.log("Shippo Shipment Create Result:", JSON.stringify(shipmentResult, null, 2));

        if (shipmentResult.object_state === 'INVALID' || !shipmentResult.rates || shipmentResult.rates.length === 0) {
            console.warn("Shippo shipment creation failed or returned no rates:", shipmentResult.messages);
            const errorMsg = shipmentResult.messages?.map((m: any) => m.text).join(', ') || 'No shipping rates found for this address/parcel.';
            return { success: false, error: errorMsg }; // RETURN ERROR
        }

        const rates: ShippingRate[] = shipmentResult.rates
            .filter((rate: any) => rate.object_state === 'VALID')
            .map((rate: any) => ({
                id: rate.object_id,
                name: `${rate.provider} ${rate.servicelevel.name} (Est. ${rate.estimated_days || 'N/A'} days)`,
                amount: Math.round(parseFloat(rate.amount) * 100),
                carrier: rate.provider,
                serviceLevelToken: rate.servicelevel.token,
                estimatedDays: rate.estimated_days,
            }))
            .sort((a: ShippingRate, b: ShippingRate) => a.amount - b.amount);

        console.log("Formatted Rates:", rates);

        if (rates.length === 0) {
            return { success: false, error: 'No valid shipping options available for this address.' }; // RETURN ERROR
        }

        return { success: true, rates: rates }; // RETURN SUCCESS

    } catch (error: any) {
        console.error("Shippo API Error in getShippingRates:", error);
        let errorMessage = 'Failed to fetch shipping rates due to an unexpected error.';
        if (error?.body?.detail) {
            errorMessage = typeof error.body.detail === 'string' ? error.body.detail : JSON.stringify(error.body.detail);
        } else if (error instanceof Error) {
            errorMessage = error.message;
        }
        return { success: false, error: errorMessage }; // RETURN ERROR
    }
}


'use server';

import { createClient } from '@/utils/supabase/server';
import { encodedRedirect } from '@/utils/utils';
import { headers, cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import { prisma } from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
import { UserRole, OrderStatus, Prisma } from '@prisma/client'; // Assuming UserRole enum is generated by Prisma
import { z } from 'zod';
import { Decimal } from '@prisma/client/runtime/library';
import { formatISO } from 'date-fns'; // Ensure date-fns is imported
import { randomUUID } from 'crypto'; // <-- Import randomUUID

// Re-add BigInt patch if needed directly in actions, or ensure it runs globally
(BigInt.prototype as any).toJSON = function() {
  return this.toString();
};

// --- Validation Schemas (Define or import as needed) ---
const AddressSchema = z.object({
  street: z.string().min(1),
  street2: z.string().optional(),
  city: z.string().min(1),
  state: z.string().min(1),
  postalCode: z.string().min(1),
  country: z.string().min(1), // e.g., 'US'
});

const CustomerInfoSchema = z.object({
  name: z.string().min(1),
  email: z.string().email(),
  phone: z.string().min(1),
  pickupTime: z.string().optional(), // Validate format if always present for pickup
});

const FulfillmentSchema = z.object({
  method: z.enum(['pickup', 'delivery', 'shipping']),
  pickupTime: z.string().optional(), // Format: YYYY-MM-DDTHH:mm:00
  deliveryTime: z.string().optional(),
  deliveryAddress: AddressSchema.optional(),
  deliveryInstructions: z.string().optional(),
  shippingAddress: AddressSchema.optional(),
  shippingMethod: z.string().optional(),
});

const CartItemSchema = z.object({
  id: z.string(), // Your internal Product ID
  name: z.string(),
  price: z.number(), // Price per item in DOLLARS (e.g., 12.99)
  quantity: z.number().min(1),
  variantId: z.string().optional(),
  // Add other necessary fields like image, variant name etc. if needed for Square
});

const CreateOrderSchema = z.object({
  items: z.array(CartItemSchema).min(1),
  customerInfo: CustomerInfoSchema,
  fulfillment: FulfillmentSchema,
});
// --- End Schemas ---

// Helper to map country code (reuse from API route or define here)
const mapCountryCode = (code: string | undefined): string | undefined => {
    if (!code) return undefined;
    const upperCaseCode = code.toUpperCase();
    if (['US', 'CA'].includes(upperCaseCode)) return upperCaseCode;
    console.warn(`Unsupported country code: ${code}. Returning original.`);
    return upperCaseCode;
}

export const signUpAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const password = formData.get('password')?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get('origin');

  if (!email || !password) {
    return { error: 'Email and password are required' };
  }

  try {
    const { error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${origin}/auth/callback`,
      },
    });

    if (error) {
      console.error('Supabase SignUp Error:', error);
      // Consider mapping common errors to user-friendly messages
      if (error.message.includes('User already registered')) {
        return { error: 'This email is already registered. Please sign in or use a different email.' };
      }
      // Add more specific error checks if needed
      return { error: `Sign up failed: ${error.message}` };
    }

    // Successfully initiated sign up (user needs to confirm email)
    return {};
  } catch (exception: any) {
    console.error('Exception during Supabase SignUp:', exception);
    return { error: `An unexpected error occurred during sign up: ${exception.message || 'Unknown error'}` };
  }
};

export const signInAction = async (formData: FormData) => {
  const email = formData.get('email') as string;
  const password = formData.get('password') as string;
  const supabase = await createClient();

  const { error: signInError } = await supabase.auth.signInWithPassword({
    email,
    password,
  });

  if (signInError) {
    return encodedRedirect('error', '/sign-in', signInError.message);
  }

  // After successful sign-in, get user and their profile
  const { data: { user } } = await supabase.auth.getUser();

  if (!user) {
    // Should not happen after successful sign-in, but handle defensively
    return encodedRedirect('error', '/sign-in', 'Could not retrieve user after sign in.');
  }

  let profile: { role: UserRole } | null = null;
  let profileFetchError: any = null; // Use 'any' or a more specific error type if known

  try { // Try block ONLY for prisma query
    profile = await prisma.profile.findUnique({
      where: { id: user.id },
      select: { role: true }, // Only select the role field
    });
  } catch (dbError) { // Catch ONLY potential database errors
    profileFetchError = dbError; // Store the error
    console.error('Prisma profile fetch error:', JSON.stringify(dbError, null, 2));
    // Redirect immediately if the database query itself fails
    return encodedRedirect('error', '/sign-in', 'Database error retrieving user profile.');
  }

  // Handle potential DB error caught earlier (though we already redirected, belt-and-suspenders)
  if (profileFetchError) {
     // This path might be redundant if the catch block always returns/redirects,
     // but kept for robustness in case return logic changes.
     return encodedRedirect('error', '/sign-in', 'Failed to retrieve user profile due to a database error.');
  }

  // Handle profile not found case (outside the try...catch)
  if (!profile) {
    // Handle case where profile might not exist yet (though handle_new_user should prevent this)
    console.warn(`Profile not found for user ${user.id} after sign in.`);
    return encodedRedirect('error', '/sign-in', 'User profile not found.');
  }

  // Profile fetched successfully, perform redirect based on role (outside the try...catch)
  if (profile.role === UserRole.ADMIN) { // Use Prisma enum for role comparison
    return redirect('/admin');
  } else {
    // Redirect non-admins to the homepage or a customer dashboard
    return redirect('/'); // Or change to e.g., '/dashboard'
  }
};

export const forgotPasswordAction = async (formData: FormData) => {
  const email = formData.get('email')?.toString();
  const supabase = await createClient();
  const origin = (await headers()).get('origin');
  const callbackUrl = formData.get('callbackUrl')?.toString();

  if (!email) {
    return encodedRedirect('error', '/forgot-password', 'Email is required');
  }

  const { error } = await supabase.auth.resetPasswordForEmail(email, {
    redirectTo: `${origin}/auth/callback?redirect_to=/protected/reset-password`,
  });

  if (error) {
    console.error(error.message);
    return encodedRedirect('error', '/forgot-password', 'Could not reset password');
  }

  if (callbackUrl) {
    return redirect(callbackUrl);
  }

  return encodedRedirect(
    'success',
    '/forgot-password',
    'Check your email for a link to reset your password.'
  );
};

export const resetPasswordAction = async (formData: FormData) => {
  const supabase = await createClient();

  const password = formData.get('password') as string;
  const confirmPassword = formData.get('confirmPassword') as string;

  if (!password || !confirmPassword) {
    encodedRedirect(
      'error',
      '/protected/reset-password',
      'Password and confirm password are required'
    );
  }

  if (password !== confirmPassword) {
    encodedRedirect('error', '/protected/reset-password', 'Passwords do not match');
  }

  const { error } = await supabase.auth.updateUser({
    password: password,
  });

  if (error) {
    encodedRedirect('error', '/protected/reset-password', 'Password update failed');
  }

  encodedRedirect('success', '/protected/reset-password', 'Password updated');
};

export const signOutAction = async () => {
  const supabase = await createClient();
  await supabase.auth.signOut();
  return redirect('/sign-in');
};

// Types for fulfillment data
interface Address {
  street: string;
  street2?: string;
  city: string;
  state: string;
  postalCode: string;
  country: string;
}

interface PickupFulfillment {
  method: 'pickup';
  pickupTime: string;
}

interface DeliveryFulfillment {
  method: 'delivery';
  deliveryAddress: Address;
  deliveryTime: string;
  deliveryInstructions?: string;
}

interface ShippingFulfillment {
  method: 'shipping';
  shippingAddress: Address;
  shippingMethod: string;
}

// Export this type
export type FulfillmentData = PickupFulfillment | DeliveryFulfillment | ShippingFulfillment;

type OrderItem = {
  id: string;
  quantity: number;
  price: number;
  product: {
    name: string;
  };
  variant?: {
    name: string;
  } | null;
};

// --- Add Server Action Return Type --- 
type ServerActionResult = {
  success: boolean;
  error: string | null;
  checkoutUrl: string | null;
  orderId: string | null;
};

/**
 * Creates an order in the database
 */
export async function createOrder(orderData: {
  items: Array<{
    id: string;
    quantity: number;
    price: number;
    variantId?: string;
  }>;
  customerInfo: {
    name: string;
    email: string;
    phone: string;
    pickupTime: string;
  };
  squareOrderId?: string;
  fulfillmentData?: FulfillmentData;
}) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    const { data: { user } } = await supabase.auth.getUser();
    
    // Calculate total price
    const totalPrice = orderData.items.reduce(
      (sum, item) => sum + (item.price * item.quantity),
      0
    );
    
    // Prepare order data with base fields
    const orderCreateData: any = {
      squareOrderId: orderData.squareOrderId,
      status: 'PENDING',
      total: totalPrice,
      userId: user?.id, // Will be null for guest checkout
      customerName: orderData.customerInfo.name,
      email: orderData.customerInfo.email,
      phone: orderData.customerInfo.phone,
      paymentStatus: 'PENDING',
      items: {
        create: orderData.items.map(item => ({
          quantity: item.quantity,
          price: item.price,
          productId: item.id,
          variantId: item.variantId
        }))
      }
    };
    
    // Set pickup time based on fulfillment method
    if (orderData.fulfillmentData) {
      const { method } = orderData.fulfillmentData;
      
      // Store fulfillment details in the notes field (as JSON)
      orderCreateData.notes = JSON.stringify(orderData.fulfillmentData);
      
      if (method === 'pickup') {
        // For pickup, use the pickup time from fulfillment data
        orderCreateData.pickupTime = new Date(orderData.fulfillmentData.pickupTime);
      } else if (method === 'delivery') {
        // For delivery, use delivery time as pickup time
        orderCreateData.pickupTime = new Date(orderData.fulfillmentData.deliveryTime);
      } else {
        // For shipping, use the current time as a placeholder
        orderCreateData.pickupTime = new Date();
      }
    } else {
      // Fallback to the customer info pickup time
      orderCreateData.pickupTime = new Date(orderData.customerInfo.pickupTime);
    }
    
    // Create order in database
    const order = await prisma.order.create({
      data: orderCreateData,
      include: {
        items: true
      }
    });
    
    return { success: true, orderId: order.id };
  } catch (error) {
    console.error('Error creating order:', error);
    return { success: false, error: 'Failed to create order' };
  }
}

/**
 * Updates an order with Square payment information
 */
export async function updateOrderPayment(orderId: string, squareOrderId: string) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    await prisma.order.update({
      where: { id: orderId },
      data: {
        squareOrderId,
        paymentStatus: 'PAID'
      }
    });
    
    return { success: true };
  } catch (error) {
    console.error('Error updating order payment:', error);
    return { success: false, error: 'Failed to update order payment' };
  }
}

/**
 * Retrieves order details by ID
 */
export async function getOrderById(orderId: string) {
  try {
    // Await the createClient call
    const supabase = await createClient();
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      include: {
        items: {
          include: {
            product: true,
            variant: true
          }
        }
      }
    });
    
    if (!order) {
      return { success: false, error: 'Order not found' };
    }
    
    // Parse fulfillment data if available
    let fulfillmentDetails = null;
    if (order.notes) {
      try {
        fulfillmentDetails = JSON.parse(order.notes);
      } catch (e) {
        console.error('Error parsing fulfillment data:', e);
      }
    }
    
    return {
      success: true,
      order: {
        id: order.id,
        status: order.status,
        totalAmount: Number(order.total),
        customerName: order.customerName,
        email: order.email,
        phone: order.phone,
        pickupTime: order.pickupTime.toISOString(),
        paymentStatus: order.paymentStatus,
        createdAt: order.createdAt.toISOString(),
        fulfillment: fulfillmentDetails,
        items: order.items.map((item) => ({
          id: item.id,
          name: item.product.name,
          quantity: item.quantity,
          price: Number(item.price),
          variantName: item.variant?.name
        }))
      }
    };
  } catch (error) {
    console.error('Error retrieving order:', error);
    return { success: false, error: 'Failed to retrieve order' };
  }
}

// Server Action Implementation
export async function createOrderAndGenerateCheckoutUrl(formData: {
    items: z.infer<typeof CartItemSchema>[];
    customerInfo: z.infer<typeof CustomerInfoSchema>;
    fulfillment: z.infer<typeof FulfillmentSchema>;
}): Promise<ServerActionResult> {
    console.log("Server Action: createOrderAndGenerateCheckoutUrl started.");
    
    // ---> Get Supabase User ID <---
    let supabaseUserId: string | null = null;
    try {
        const supabase = await createClient(); // Call without cookieStore
        const { data: { user } } = await supabase.auth.getUser();
        if (user) {
            supabaseUserId = user.id;
            console.log(`Authenticated User ID: ${supabaseUserId}`);
        } else {
            console.log("No authenticated user found for this order.");
        }
    } catch (authError) {
        console.error("Error getting Supabase user:", authError);
        // Decide if you want to fail the action or allow guest checkout
        // return { success: false, error: "Authentication error.", checkoutUrl: null, orderId: null }; 
    }
    // ---> End Supabase User ID <---

    const validation = CreateOrderSchema.safeParse(formData);

    if (!validation.success) {
        console.error("Server Action Validation Error:", validation.error.errors);
        return { success: false, error: "Invalid input data.", checkoutUrl: null, orderId: null };
    }

    const { items, customerInfo, fulfillment } = validation.data;

    // --- 1. Calculate Total & Prepare DB Data ---
    let calculatedTotal = 0;
    const orderItemsData = items.map(item => {
        const itemTotal = item.price * item.quantity;
        calculatedTotal += itemTotal;
        return {
            productId: item.id,
            variantId: item.variantId,
            quantity: item.quantity,
            price: new Decimal(item.price),
        };
    });
    const orderTotal = new Decimal(calculatedTotal.toFixed(2));
    console.log(`Calculated Total: ${orderTotal}`);

    let dbOrder: { id: string } | null = null;
    try {
        // --- 2. Create Order and Items in DB ---
        console.log("Creating order in database...");
        
        let pickupDateValue: string | Date = new Date().toISOString(); // Default to current time as ISO string
        if (fulfillment.method === 'pickup' && fulfillment.pickupTime) {
            try {
                const parsedDate = new Date(fulfillment.pickupTime);
                if (!isNaN(parsedDate.getTime())) {
                    pickupDateValue = parsedDate; // Use Date object if valid
                } else {
                    console.warn('Invalid pickup date string provided, using default time:', fulfillment.pickupTime);
                }
            } catch (e) {
                 console.error('Error creating date from pickupTime string, using default time:', e);
            }
        }

        dbOrder = await prisma.order.create({
            data: {
                status: OrderStatus.PENDING,
                paymentStatus: 'PENDING',
                total: orderTotal,
                userId: supabaseUserId,
                customerName: customerInfo.name,
                email: customerInfo.email,
                phone: customerInfo.phone,
                pickupTime: pickupDateValue,
                items: {
                    create: orderItemsData,
                },
            },
            select: { id: true } 
        });
        console.log(`Database Order created with ID: ${dbOrder.id}`);

        // --- 3. Prepare Data for Square API ---
        const locationId = process.env.SQUARE_LOCATION_ID;
        const accessToken = process.env.SQUARE_ACCESS_TOKEN;
        const squareEnv = process.env.SQUARE_ENVIRONMENT;
        const supportEmail = process.env.SUPPORT_EMAIL;

        if (!locationId || !accessToken || !squareEnv) {
             console.error('Server Action Config Error: Missing Square ENV variables.');
             return { success: false, error: 'Server configuration error.', checkoutUrl: null, orderId: dbOrder.id };
        }

        const BASE_URL = squareEnv === 'sandbox'
            ? 'https://connect.squareupsandbox.com'
            : 'https://connect.squareup.com';

        const squareLineItems = items.map(item => ({
            quantity: item.quantity.toString(),
            base_price_money: {
                amount: Math.round(item.price * 100),
                currency: "USD",
            },
            name: item.name,
        }));

        let squareFulfillmentData: any = { type: fulfillment.method.toUpperCase() };
        if (fulfillment.method === 'pickup' && fulfillment.pickupTime) {
            try {
                const pickupDate = new Date(fulfillment.pickupTime);
                if (isNaN(pickupDate.getTime())) throw new Error('Invalid pickup date/time format');
                squareFulfillmentData.pickup_details = {
                    pickup_at: formatISO(pickupDate),
                    note: 'Please bring your ID for pickup', 
                    recipient: {
                        display_name: customerInfo.name,
                        email_address: customerInfo.email,
                        phone_number: customerInfo.phone,
                    }
                };
            } catch (dateError: any) {
                 console.error('Error parsing pickup time for Square:', dateError.message);
                 return { success: false, error: 'Invalid pickup time format.', checkoutUrl: null, orderId: dbOrder.id };
            }
        }
        // ... Add else if for delivery and shipping logic here ...

        const origin = process.env.NEXT_PUBLIC_APP_URL;
        if (!origin) {
            console.error('Server Action Config Error: NEXT_PUBLIC_APP_URL is not set.');
            return { success: false, error: 'Server configuration error: Base URL missing.', checkoutUrl: null, orderId: dbOrder.id };
        }
        const redirectUrl = `${origin}/order-confirmation?status=success&orderId=${dbOrder.id}`; 
        const cancelUrl = `${origin}/cart?status=cancelled`; 

        const squareRequestBody = {
            idempotency_key: randomUUID(),
            order: {
                location_id: locationId,
                reference_id: dbOrder.id, 
                line_items: squareLineItems,
                fulfillments: [squareFulfillmentData],
                metadata: supabaseUserId ? { supabaseUserId: supabaseUserId } : undefined
            },
            checkout_options: {
                redirect_url: redirectUrl,
                cancel_url: cancelUrl,
                allow_tipping: true,
                ask_for_shipping_address: fulfillment.method === 'shipping',
                merchant_support_email: supportEmail || customerInfo.email,
                 accepted_payment_methods: {
                    apple_pay: true, google_pay: true, cash_app_pay: false, afterpay_clearpay: false
                 }
            },
        };

        // --- 4. Call Square API ---
        console.log("Calling Square API to create payment link...");
        const paymentLinkUrl = `${BASE_URL}/v2/online-checkout/payment-links`;
        const fetchResponse = await fetch(paymentLinkUrl, {
            method: 'POST',
            headers: {
                'Square-Version': '2024-04-17', 
                'Authorization': `Bearer ${accessToken}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(squareRequestBody, (key, value) =>
                typeof value === 'bigint' ? value.toString() : value 
            )
        });

        const responseData = await fetchResponse.json();

        if (!fetchResponse.ok || !responseData.payment_link?.url || !responseData.payment_link?.order_id) {
            console.error('Square API Error response:', responseData);
             await prisma.order.update({ where: { id: dbOrder.id }, data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED' } }); 
            return { success: false, error: responseData.errors?.[0]?.detail || 'Failed to create Square payment link', checkoutUrl: null, orderId: dbOrder.id };
        }

        const checkoutUrl = responseData.payment_link.url;
        const squareOrderId = responseData.payment_link.order_id;
        console.log(`Square Checkout URL: ${checkoutUrl}, Square Order ID: ${squareOrderId}`);

        // --- 5. Update DB Order with Square Order ID ---
        console.log(`Updating DB Order ${dbOrder.id} with Square Order ID ${squareOrderId}...`);
        await prisma.order.update({
            where: { id: dbOrder.id },
            data: { squareOrderId: squareOrderId }
        });

        // --- 6. Return Success ---
        console.log("Server Action finished successfully.");
        revalidatePath('/admin/orders'); 
        revalidatePath(`/admin/orders/${dbOrder.id}`); 
        return { success: true, error: null, checkoutUrl: checkoutUrl, orderId: dbOrder.id };

    } catch (error: any) {
        console.error("Server Action Error:", error);
        if (dbOrder?.id) {
            try {
                 await prisma.order.update({ where: { id: dbOrder.id }, data: { status: OrderStatus.CANCELLED, paymentStatus: 'FAILED' } });
            } catch (updateError) {
                 console.error(`Failed to update order ${dbOrder.id} status to FAILED:`, updateError);
            }
        }
        return { success: false, error: error.message || "An unexpected error occurred.", checkoutUrl: null, orderId: dbOrder?.id || null };
    }
}

// Add other server actions if needed (updateUser, etc.)

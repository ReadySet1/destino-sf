name: Test Suite & Quality Gates

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]
  schedule:
    # Run nightly at 2 AM UTC for comprehensive testing
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '10.11.1'

jobs:
  # Job 1: Setup and cache dependencies
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Generate cache key
        id: cache-key
        run: echo "key=pnpm-${{ hashFiles('pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Job 2: Type checking and linting
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm type-check

      - name: Lint code
        run: pnpm lint

      - name: Format check
        run: pnpm format --check

  # Job 3: Unit tests with coverage
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        test-group: [lib, utils, components, api]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL="postgresql://test:test@localhost:5432/destino_sf_test"
          NEXT_PUBLIC_APP_URL="http://localhost:3000"
          SQUARE_ACCESS_TOKEN="test_token"
          SQUARE_LOCATION_ID="test_location"
          EOF

      - name: Run unit tests
        run: pnpm test:${{ matrix.test-group }} --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.test-group }}-coverage

  # Job 4: Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: destino_sf_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test database
        run: |
          cat > .env.test << EOF
          NODE_ENV=test
          DATABASE_URL="postgresql://test:test@localhost:5432/destino_sf_test"
          NEXT_PUBLIC_APP_URL="http://localhost:3000"
          SQUARE_ACCESS_TOKEN="test_token"
          SQUARE_LOCATION_ID="test_location"
          EOF

      - name: Run database migrations
        run: pnpm prisma migrate deploy

      - name: Run integration tests
        run: pnpm test:integration --coverage --watchAll=false

      - name: Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          flags: integration
          name: integration-coverage

  # Job 5: E2E tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install ${{ matrix.browser }} --with-deps

      - name: Build application
        run: pnpm build

      - name: Run E2E tests
        run: pnpm test:e2e --project=${{ matrix.browser }}
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-results-${{ matrix.browser }}
          path: test-results/

  # Job 6: Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Build for analysis
        run: pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run npm audit
        run: pnpm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Job 7: Performance testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run performance tests
        run: pnpm test:performance

  # Job 8: Coverage aggregation and quality gates
  coverage-gates:
    name: Coverage & Quality Gates
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v3

      - name: Merge coverage reports
        run: |
          # Merge coverage reports from different test suites
          echo "Merging coverage reports..."

      - name: Check coverage thresholds
        run: |
          # Validate coverage meets minimum thresholds
          COVERAGE_THRESHOLD=85
          CRITICAL_PATH_THRESHOLD=90
          
          echo "Validating coverage thresholds..."
          echo "Global threshold: ${COVERAGE_THRESHOLD}%"
          echo "Critical paths threshold: ${CRITICAL_PATH_THRESHOLD}%"

      - name: Quality gate evaluation
        run: |
          echo "Evaluating quality gates..."
          
          # Check if all required tests passed
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          echo "✅ All quality gates passed"

  # Job 9: Deployment readiness check
  deployment-gates:
    name: Deployment Gates
    runs-on: ubuntu-latest
    needs: [quality-checks, unit-tests, integration-tests, e2e-tests, security-scan, coverage-gates]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Evaluate deployment readiness
        run: |
          echo "Evaluating deployment readiness..."
          
          # Check all required jobs passed
          JOBS_STATUS=(
            "${{ needs.quality-checks.result }}"
            "${{ needs.unit-tests.result }}"
            "${{ needs.integration-tests.result }}"
            "${{ needs.e2e-tests.result }}"
            "${{ needs.security-scan.result }}"
            "${{ needs.coverage-gates.result }}"
          )
          
          for status in "${JOBS_STATUS[@]}"; do
            if [ "$status" != "success" ]; then
              echo "❌ Deployment blocked - Required job failed: $status"
              exit 1
            fi
          done
          
          echo "✅ Deployment approved - All gates passed"

      - name: Create deployment comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '✅ **Deployment Gates Passed**\n\nAll quality gates have been satisfied. This PR is ready for deployment to production.'
            })

  # Job 10: Nightly comprehensive testing
  nightly-comprehensive:
    name: Nightly Comprehensive Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run comprehensive test suite
        run: |
          pnpm test:ci
          pnpm test:e2e
          pnpm test:performance
          pnpm test:accessibility

      - name: Generate test health report
        run: |
          echo "Generating nightly test health report..."
          # Generate comprehensive report of test suite health

      - name: Send notification on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            // Send notification to team about nightly test failures
            console.log('Nightly tests failed - notification sent')

# Workflow-level settings
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true 